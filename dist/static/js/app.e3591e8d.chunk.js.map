{"version":3,"sources":["Enums/FeedbackTypeEnums.ts","View/HashTag/HashTag.tsx","View/HashTag/HashTagList.tsx","View/Button/FeedbackButton.tsx","Query/TopicsQuery.tsx","View/User/User.tsx","View/Info/MemeInfo.tsx","View/Picture/MemeImage.tsx","pages/topic.tsx","pages/profile.tsx","Providers/ApolloClient.tsx","Configs/EnvironmentConfigs.ts","App.tsx","web-build/register-service-worker.js"],"names":["FeedbackTypeEnums","HashTag","showPoundSign","text","onPressCallback","View","Text","onPress","Item","item","style","TouchableOpacity","styles","title","HashTagList","hashtagList","onSelectionCallBack","useState","selectedId","setSelectedId","length","SafeAreaView","FlatList","list","horizontal","data","renderItem","borderBottomColor","id","borderBottomWidth","backgroundColor","keyExtractor","extraData","StyleSheet","create","height","flexGrow","padding","fontSize","FeedbackButton","initialCount","feedbackType","count","setCount","useEffect","feedbackButton","FontAwesome5","Button","name","Like","size","color","margin","display","flexDirection","flex","justifyContent","borderColor","borderWidth","borderRadius","GET_POPULAR_TAGS","gql","GET_MEMES_BY_TAG","User","imageUrl","user","Image","source","uri","AntDesign","alignItems","pluralize","require","MemeInfo","creationTime","discussionCount","shareCount","date","Date","discussionNum","setDiscussionNum","shareNum","setShareNum","dateString","getMonth","toString","padStart","getDate","getFullYear","getHours","getMinutes","getSeconds","container","number","MemeImage","background","memeHeaderInfo","author","createTime","url","tags","map","tag","counter","likeCount","dislikeCount","Dislike","TopicScreen","navigation","selectedTag","setSelectedTag","useQuery","popularTagsIsLoading","loading","popularTagsData","skip","popularTags","variables","memeTagsData","loadingStyles","ActivityIndicator","hashTag","memesByTag","marginTop","StatusBar","currentHeight","marginVertical","marginHorizontal","DATA","code","ProfileScreen","userData","itemDimension","gridView","fixed","spacing","itemContainer","itemName","itemCode","ListHeaderComponent","marginBottom","width","marginLeft","fontWeight","apolloClient","ApolloClient","link","HttpLink","fetch","cache","InMemoryCache","NotificationsScreen","TopicStack","createStackNavigator","TopicStackScreen","Navigator","Screen","component","ProfileStack","ProfileStackScreen","NotificationStack","NotificationsStackScreen","Tab","createBottomTabNavigator","App","client","NavigationContainer","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"6HAAYA,E,4ICcCC,EAAU,SAAC,GAIF,IAHpBC,EAGmB,EAHnBA,cACAC,EAEmB,EAFnBA,KAEmB,IADnBC,uBACmB,MADD,aACC,EACnB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,QAASH,GAAkBF,EAAa,IAAOC,EAASA,KCH9DK,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMF,EAAT,EAASA,QAASG,EAAlB,EAAkBA,MAAOR,EAAzB,EAAyBA,cAAzB,OACX,kBAACS,EAAA,EAAD,CAAkBJ,QAASA,EAASG,MAAO,CAACE,EAAOH,KAAMC,IACvD,kBAAC,EAAD,KAASA,MAAOE,EAAOC,OAAWJ,EAAlC,CAAwCP,cAAeA,OAI9CY,EAAc,SAAC,GAIrB,IAHLC,EAGI,EAHJA,YACAb,EAEI,EAFJA,cAEI,IADJc,2BACI,MADkB,SAACP,KACnB,IACgCQ,mBAAS,MADzC,WACGC,EADH,KACeC,EADf,KAuBJ,OAA+B,KAAb,MAAXJ,OAAA,EAAAA,EAAaK,QAClB,qCAEA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEZ,MAAOE,EAAOW,KACdC,YAAU,EACVC,KAAMV,EACNW,WA5Ba,SAAC,GAAkC,IAAhCjB,EAA+B,EAA/BA,KACdkB,EAAoBlB,EAAKmB,KAAOV,EAAa,UAAY,UAE/D,OACE,kBAAC,EAAD,CACEhB,cAAeA,EACfO,KAAMA,EACNF,QAAS,WACPY,EAAcV,EAAKmB,IACnBZ,EAAoBP,IAEtBC,MAAO,CACLmB,kBAAmB,QACnBF,oBACAG,gBAAiB,cAenBC,aAAc,SAACtB,GAAD,aAAUA,OAAV,EAAUA,EAAMmB,IAC9BI,UAAWd,MAMbN,EAASqB,IAAWC,OAAO,CAC/BX,KAAM,CACJY,OAAQ,GACRC,SAAU,GAEZ3B,KAAM,CACJ4B,QAAS,IAEXxB,MAAO,CACLyB,SAAU,O,SF5EFtC,O,eAAAA,I,sBAAAA,M,kBGUCuC,EAAiB,SAAC,GAGF,IAF3BC,EAE0B,EAF1BA,aACAC,EAC0B,EAD1BA,aAC0B,EACAxB,mBAAS,GADT,WACnByB,EADmB,KACZC,EADY,KAQ1B,OAJAC,qBAAU,WACRD,EAASH,KACR,CAACA,IAGF,kBAACnC,EAAA,EAAD,CAAMK,MAAOE,EAAOiC,gBAClB,kBAACC,EAAA,EAAaC,OAAd,CACEC,KACEP,IAAiBzC,EAAkBiD,KAC/B,YACA,cAENnB,gBAAgB,UAChBvB,QAAS,kBAAMoC,EAASD,EAAQ,IAChCQ,KAAM,GACNC,MAAM,UAER,kBAAC9C,EAAA,EAAD,CAAMK,MAAOE,EAAO8B,OAAQA,KAK5B9B,EAASqB,IAAWC,OAAO,CAC/BW,eAAgB,CACdO,OAAQ,GACRf,QAAS,GACTgB,QAAS,OACTC,cAAe,MACfC,KAAM,EACNC,eAAgB,gBAChBC,YAAa,UACbC,YAAa,EACbC,aAAc,IAEhBjB,MAAO,CACLU,OAAQ,M,+bClDL,IAAMQ,EAAmBC,cAAH,KAMhBC,EAAmBD,cAAH,K,iBCAhBE,EAAO,SAAC,GAAuC,EAArCnC,GAAsC,IAAlCoC,EAAiC,EAAjCA,SAAUhB,EAAuB,EAAvBA,KACnC,OACE,kBAAC3C,EAAA,EAAD,CAAMK,MAAOE,EAAOqD,MACjBD,EAAW,kBAACE,EAAA,EAAD,CAAOC,OAAQ,CAAEC,IAAKJ,KAAiB,kBAACK,EAAA,EAAD,CAAWrB,KAAK,OAAOE,KAAM,GAAIC,MAAM,UAC1F,kBAAC7C,EAAA,EAAD,CAAMI,MAAOE,EAAOoC,MAAOA,KAM3BpC,EAASqB,IAAWC,OAAO,CAC/B+B,KAAM,CACJZ,QAAS,OACTC,cAAe,MACfC,KAAM,EACNH,OAAQ,GAEVJ,KAAM,CACJI,OAAQ,EACRC,QAAS,OACTiB,WAAY,YCpBVC,EAAYC,EAAQ,KAGbC,EAAW,SAAC,GAIF,IAHrBC,EAGoB,EAHpBA,aACAC,EAEoB,EAFpBA,gBACAC,EACoB,EADpBA,WAEMC,EAAOH,EAAe,IAAII,KAAKJ,GAAgB,IAAII,KADrC,EAEsB7D,mBAAS,GAF/B,WAEb8D,EAFa,KAEEC,EAFF,OAGY/D,mBAAS,GAHrB,WAGbgE,EAHa,KAGHC,EAHG,KAKpBtC,qBAAU,WACJ+B,GAAiBK,EAAiBL,GAClCC,GAAYM,EAAYN,KAC3B,CAACD,EAAiBC,IAErB,IAAMO,EAAaT,GACXG,EAAKO,WAAa,GACrBC,WACAC,SAAS,EAAG,KAHc,IAGNT,EAClBU,UACAF,WACAC,SAAS,EAAG,KANY,IAMJT,EAClBW,cACAH,WACAC,SAAS,EAAG,KATU,IASFT,EAClBY,WACAJ,WACAC,SAAS,EAAG,KAZQ,IAYAT,EAClBa,aACAL,WACAC,SAAS,EAAG,KAfM,IAeET,EAAKc,aAAaN,WAAWC,SAAS,EAAG,KACtE,GAEJ,OACE,kBAACjF,EAAA,EAAD,CAAMK,MAAOE,EAAOgF,WAClB,kBAACvF,EAAA,EAAD,CAAMK,MAAOE,EAAOiE,MAClB,kBAACvE,EAAA,EAAD,KAAO6E,IAET,kBAAC9E,EAAA,EAAD,CAAMK,MAAOE,EAAOiF,QAClB,kBAACvF,EAAA,EAAD,oBAAsByE,EAAtB,UAA6CR,EAAU,cAAvD,mBACA,kBAACjE,EAAA,EAAD,eAAiB2E,EAAjB,UAAmCV,EAAU,SAA7C,iBAMF3D,EAASqB,IAAWC,OAAO,CAC/B0D,UAAW,CACTvC,QAAS,OACTC,cAAe,UAEjBuB,KAAM,CACJxB,QAAS,OACTC,cAAe,cACfC,KAAM,GAERsC,OAAQ,CACNxC,QAAS,OACTC,cAAe,cACfC,KAAM,KC9DGuC,EAAY,SAAC,GAEH,EADrB9B,SAEA,OACE,kBAAC3D,EAAA,EAAD,CAAMK,MAAOE,EAAOgF,WAElB,kBAACvB,EAAA,EAAD,CAAWrB,KAAK,UAAUE,KAAM,IAAKC,MAAM,YAK3CvC,EAASqB,IAAWC,OAAO,CAC/B0D,UAAW,CACTvC,QAAS,OACTC,cAAe,MACfE,eAAgB,kBCEdhD,EAAO,SAAC,GAAD,sBAAGC,EAAH,EAAGA,KAAMF,EAAT,EAASA,QAAT,OAIT,kBAACI,EAAA,EAAD,CAAkBJ,QAASA,EAASG,MAAO,CAACE,EAAOH,KAAMG,EAAOmF,aAC9D,kBAAC1F,EAAA,EAAD,CAAMK,MAAOE,EAAOoF,gBAClB,kBAAC,EAAD,CAAMpE,GAAE,MAAEnB,GAAF,SAAEA,EAAMwF,aAAR,EAAE,EAAcrE,GAAIoB,KAAI,MAAEvC,GAAF,SAAEA,EAAMwF,aAAR,EAAE,EAAcjD,OAChD,kBAAC,EAAD,CAAU0B,aAAY,eAAEjE,OAAF,EAAEA,EAAMyF,YAAR,EAAsB,MAE9C,kBAAC7F,EAAA,EAAD,KACE,kBAAC,EAAD,CAAW2D,SAAQ,MAAEvD,OAAF,EAAEA,EAAM0F,OAE7B,kBAAC9F,EAAA,EAAD,KACE,kBAAC,EAAD,CACEU,YAAW,eAAEN,GAAF,SAAEA,EAAM2F,WAAR,EAAE,EAAYC,KAAI,SAAAC,GAAS,MAAO,CAAE1E,GAAI0E,EAAKnG,KAAMmG,OAAnD,EAA+D,GAC1EpG,eAAe,KAGnB,kBAACG,EAAA,EAAD,CAAMK,MAAOE,EAAOiC,gBAClB,kBAAC,EAAD,CAAgBL,aAAY,eAAE/B,GAAF,SAAEA,EAAM8F,cAAR,EAAE,EAAeC,WAAjB,EAA8B,EAAG/D,aAAczC,EAAkBiD,OAC7F,kBAAC,EAAD,CAAgBT,aAAY,eAAE/B,GAAF,SAAEA,EAAM8F,cAAR,EAAE,EAAeE,cAAjB,EAAiC,EAAGhE,aAAczC,EAAkB0G,aAKzF,SAASC,EAAT,GAAqC,EAAdC,WAAe,IAAD,IACd3F,mBAAS,MADK,WAC3CC,EAD2C,KAC/BC,EAD+B,OAEZF,mBAAS,IAFG,WAE3C4F,EAF2C,KAE9BC,EAF8B,OAIeC,mBAC/DnD,GADeoD,EAJiC,EAI1CC,QAAqCC,EAJK,EAIXzF,KAJW,EAYSsF,mBACzDjD,EACA,CACEqD,OAAM,MAACD,OAAD,EAACA,EAAiBE,aACxBC,UAAW,CACTf,IAAKO,KAL+BS,GAZQ,EAY1CL,QAZ0C,EAYdxF,MAU9BV,EAAciG,EAChB,GACAE,EAAgBE,YAAYf,KAAI,SAACC,GACjC,MAAO,CACL1E,GAAI0E,EACJnG,KAAMmG,MAIZ1D,qBAAU,YACHiE,IAA0B,MAAX9F,OAAA,EAAAA,EAAaK,QAAS,GACxC0F,EAAe/F,EAAY,GAAGZ,SAclC,OAAO6G,EACL,kBAAC3G,EAAA,EAAD,CAAMK,MAAO,CAAC6G,EAAc3B,UAAW2B,EAAc/F,aACnD,kBAACgG,EAAA,EAAD,CAAmBtE,KAAK,WAGxB,oCACE,kBAAC,EAAD,CACEnC,YAAaA,EACbb,eAAe,EACfc,oBAhDY,SAACyG,GACnBX,EAAeW,EAAQtH,SAiDnB,kBAACkB,EAAA,EAAD,CAAcX,MAAOE,EAAOgF,WAC1B,kBAACtE,EAAA,EAAD,CACEG,KAAI,eAAE6F,OAAF,EAAEA,EAAcI,YAAhB,EAA8B,GAClChG,WAvBS,SAAC,GAAoB,IAAlBjB,EAAiB,EAAjBA,KACpB,OACE,kBAAC,EAAD,CACEA,KAAMA,EACNF,QAAS,kBAAMY,EAAcV,EAAKmB,QAoB9BG,aAAc,SAACtB,GAAD,OAAgBA,EAAKmB,IACnCI,UAAWd,MAOvB,IAAMN,EAASqB,IAAWC,OAAO,CAC/B6D,WAAY,CACVjE,gBAAiB,WAEnB8D,UAAW,CACTrC,KAAM,EACNoE,UAAWC,IAAUC,eAAiB,GAExCpH,KAAM,CACJ4B,QAAS,GACTyF,eAAgB,EAChBC,iBAAkB,EAClB1E,QAAS,QAEX2C,eAAgB,CACd3C,QAAS,OACTE,KAAM,EACND,cAAe,OAEjBT,eAAgB,CACdQ,QAAS,OACTE,KAAM,EACND,cAAe,SAIbiE,EAAgBtF,IAAWC,OAAO,CACtC0D,UAAW,CACTrC,KAAM,EACNC,eAAgB,UAElBhC,WAAY,CACV8B,cAAe,MACfE,eAAgB,eAChBnB,QAAS,M,SC/IP2F,EAAO,CACT,CAAEhF,KAAM,YAAaiF,KAAM,WAC3B,CAAEjF,KAAM,UAAWiF,KAAM,WACzB,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,YAAaiF,KAAM,WAC3B,CAAEjF,KAAM,YAAaiF,KAAM,WAC3B,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,gBAAiBiF,KAAM,WAC/B,CAAEjF,KAAM,aAAciF,KAAM,WAC5B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,UAAWiF,KAAM,WACzB,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,YAAaiF,KAAM,WAC3B,CAAEjF,KAAM,UAAWiF,KAAM,WACzB,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,YAAaiF,KAAM,WAC3B,CAAEjF,KAAM,YAAaiF,KAAM,WAC3B,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,gBAAiBiF,KAAM,WAC/B,CAAEjF,KAAM,aAAciF,KAAM,WAC5B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,WAAYiF,KAAM,WAC1B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,UAAWiF,KAAM,WACzB,CAAEjF,KAAM,cAAeiF,KAAM,WAC7B,CAAEjF,KAAM,SAAUiF,KAAM,WACxB,CAAEjF,KAAM,WAAYiF,KAAM,YAIf,SAASC,EAAT,GAAuC,EAAdtB,WAAe,IAAD,EAChB3F,mBAAS,MADO,WAE9CkH,GAF8C,WAGpC,GADVA,EAEI,aAFJA,EAGI,KAHJA,EAIM,IAJNA,EAKI,IAGV,OACE,oCACE,kBAAC9G,EAAA,EAAD,CAAcX,MAAOE,EAAOgF,WAC1B,kBAAC,IAAD,CACIwC,cAAe,IACf3G,KAAMuG,EACNtH,MAAOE,EAAOyH,SACdC,OAAK,EACLC,QAAS,GACT7G,WAAY,gBAAGjB,EAAH,EAAGA,KAAH,OACR,kBAACJ,EAAA,EAAD,CAAMK,MAAO,CAACE,EAAO4H,cAAe,CAAE1G,gBAAiBrB,EAAKwH,QACxD,kBAAC3H,EAAA,EAAD,CAAMI,MAAOE,EAAO6H,UAAWhI,EAAKuC,MACpC,kBAAC1C,EAAA,EAAD,CAAMI,MAAOE,EAAO8H,UAAWjI,EAAKwH,QAG5CU,oBAAqB,WACjB,OACI,kBAACtI,EAAA,EAAD,CAAMK,MAAO,CAAE2C,QAAS,OAAQC,cAAe,MAAOE,eAAgB,SAAUc,WAAY,SAAUsE,aAAc,KAChH,kBAACvI,EAAA,EAAD,CAAMK,MAAO,CACLoB,gBAAiB,2BAA4B6B,aAAc,GAAIxB,OAAO,GAAI0G,MAAO,GACjFxF,QAAS,OAAQG,eAAgB,SAAUc,WAAY,WAE3D,kBAAChE,EAAA,EAAD,KAAO6H,IAEX,kBAAC9H,EAAA,EAAD,CAAMK,MAAO,CAAEoI,WAAY,IAEnBX,EAAsB,kBAAC7H,EAAA,EAAD,qBAAU6H,EAAV,iBAAsC,KAEhE,kBAAC7H,EAAA,EAAD,uCAAa6H,EAAb,iBAAgCA,UAW5D,IAAMvH,EAASqB,IAAWC,OAAO,CAC/B0D,UAAW,CACTrC,KAAM,EACNoE,UAAWC,IAAUC,eAAiB,EACtC/F,gBAAiB,WAEnBuG,SAAU,CACRV,UAAW,GACXpE,KAAM,GAERiF,cAAe,CACbhF,eAAgB,WAChBG,aAAc,EACdtB,QAAS,GACTF,OAAQ,KAEVsG,SAAU,CACRnG,SAAU,GACVa,MAAO,OACP4F,WAAY,OAEdL,SAAU,CACRK,WAAY,MACZzG,SAAU,GACVa,MAAO,U,kBC3HE6F,GAAe,IAAIC,eAAa,CAC3CC,KAAM,IAAIC,WAAS,CAAE/E,ICHE,yCDG2CgF,YAClEC,MAAO,IAAIC,kBEIb,SAASC,GAAT,GAA6C,EAAd3C,WAC7B,OACE,gBAACvG,EAAA,EAAD,CAAMK,MAAO,CAAE6C,KAAM,EAAGC,eAAgB,SAAUc,WAAY,WAC5D,gBAAChE,EAAA,EAAD,6BAKN,IAAMkJ,GAAaC,cAEnB,SAASC,KACP,OACE,gBAACF,GAAWG,UAAZ,KACE,gBAACH,GAAWI,OAAZ,CAAmB5G,KAAK,QAAQ6G,UAAWlD,KAKjD,IAAMmD,GAAeL,cAErB,SAASM,KACP,OACE,gBAACD,GAAaH,UAAd,KACE,gBAACG,GAAaF,OAAd,CAAqB5G,KAAK,UAAU6G,UAAW3B,KAKrD,IAAM8B,GAAoBP,cAE1B,SAASQ,KACP,OACE,gBAACD,GAAkBL,UAAnB,KACE,gBAACK,GAAkBJ,OAAnB,CACE5G,KAAK,gBACL6G,UAAWN,MAMnB,IAAMW,GAAMC,cAEG,SAASC,KACtB,OACE,gBAAC,iBAAD,CAAgBC,OAAQrB,IACtB,gBAACsB,EAAA,EAAD,KACE,gBAACJ,GAAIP,UAAL,KACE,gBAACO,GAAIN,OAAL,CAAY5G,KAAK,QAAQ6G,UAAWH,KACpC,gBAACQ,GAAIN,OAAL,CAAY5G,KAAK,UAAU6G,UAAWE,KACtC,gBAACG,GAAIN,OAAL,CACE5G,KAAK,eACL6G,UAAWI,U,+DC5DnB,kBAAmBM,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.e3591e8d.chunk.js","sourcesContent":["export enum FeedbackTypeEnums {\n  Like,\n  Dislike,\n}\n","import React from 'react'\nimport {\n  View,\n  Text,\n  NativeSyntheticEvent,\n  NativeTouchEvent,\n} from 'react-native'\n\ninterface IHashTagProps {\n  showPoundSign?: boolean\n  onPressCallback?: (ev: NativeSyntheticEvent<NativeTouchEvent>) => void\n  text: string\n}\n\nexport const HashTag = ({\n  showPoundSign,\n  text,\n  onPressCallback = () => {},\n}: IHashTagProps) => {\n  return (\n    <View>\n      <Text onPress={onPressCallback}>{showPoundSign ? `#${text}` : text}</Text>\n    </View>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  Text,\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native'\nimport { HashTag } from './HashTag'\nimport { IHashTag } from '../../Model/IHashTag'\n\ninterface IHashTagListProps {\n  hashtagList: IHashTag[]\n  showPoundSign?: boolean\n  onSelectionCallBack?: (item: IHashTag) => void\n}\n\nconst Item = ({ item, onPress, style, showPoundSign }) => (\n  <TouchableOpacity onPress={onPress} style={[styles.item, style]}>\n    <HashTag style={styles.title} {...item} showPoundSign={showPoundSign} />\n  </TouchableOpacity>\n)\n\nexport const HashTagList = ({\n  hashtagList,\n  showPoundSign,\n  onSelectionCallBack = (item: IHashTag): void => {},\n}) => {\n  const [selectedId, setSelectedId] = useState(null)\n\n  const renderItem = ({ item }: { item: IHashTag }) => {\n    const borderBottomColor = item.id === selectedId ? '#E83468' : '#FFFFFF'\n\n    return (\n      <Item\n        showPoundSign={showPoundSign}\n        item={item}\n        onPress={() => {\n          setSelectedId(item.id)\n          onSelectionCallBack(item)\n        }}\n        style={{\n          borderBottomWidth: 'thick',\n          borderBottomColor,\n          backgroundColor: '#FFFFFF',\n        }}\n      />\n    )\n  }\n\n  return hashtagList?.length === 0 ? (\n    <></>\n  ) : (\n    <SafeAreaView>\n      <FlatList<IHashTag>\n        style={styles.list}\n        horizontal\n        data={hashtagList}\n        renderItem={renderItem}\n        keyExtractor={(item) => item?.id}\n        extraData={selectedId}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  list: {\n    height: 50,\n    flexGrow: 0,\n  },\n  item: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 16,\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { FeedbackTypeEnums } from '../../Enums/FeedbackTypeEnums'\nimport { FontAwesome5 } from '@expo/vector-icons'\n\ninterface IFeedbackButtonProps {\n  initialCount?: number;\n  feedbackType: FeedbackTypeEnums\n}\n\nexport const FeedbackButton = ({\n  initialCount,\n  feedbackType\n}: IFeedbackButtonProps) => {\n  const [count, setCount] = useState(0)\n\n\n  useEffect(() => {\n    setCount(initialCount)\n  }, [initialCount])\n\n  return (\n    <View style={styles.feedbackButton}>\n      <FontAwesome5.Button\n        name={\n          feedbackType === FeedbackTypeEnums.Like\n            ? 'thumbs-up'\n            : 'thumbs-down'\n        }\n        backgroundColor=\"#FFFFFF\"\n        onPress={() => setCount(count + 1)}\n        size={24}\n        color=\"black\"\n      ></FontAwesome5.Button>\n      <View style={styles.count}>{count}</View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  feedbackButton: {\n    margin: 10,\n    padding: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'space-between',\n    borderColor: '#C4C4C4',\n    borderWidth: 3,\n    borderRadius: 50,\n  },\n  count: {\n    margin: 10,\n  },\n})\n","import { gql } from '@apollo/client'\n\nexport const GET_POPULAR_TAGS = gql`\n  query Popular_Tags {\n    popularTags\n  }\n`\n\nexport const GET_MEMES_BY_TAG = gql`\n  query Memes_By_Tag($tag: String!) {\n    memesByTag(tag: $tag) {\n      id\n      author {\n        id\n        name\n      }\n      tags\n      url\n      createTime\n      counter {\n        likeCount\n        dislikeCount\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { View, Text, Image, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons';\ninterface IUserProps {\n  id?: string;\n  imageUrl?: string\n  name?: string\n}\nexport const User = ({ id, imageUrl, name }: IUserProps) => {\n  return (\n    <View style={styles.user}>\n      {imageUrl ? <Image source={{ uri: imageUrl }} /> : <AntDesign name=\"user\" size={36} color=\"black\" />}\n      <Text style={styles.name}>{name}</Text>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  user: {\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    margin: 5\n  },\n  name: {\n    margin: 5,\n    display: 'flex',\n    alignItems: 'center'\n  }\n})","import React, { useEffect, useState } from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\ninterface IMemeInfoProps {\n  creationTime?: string\n  discussionCount?: number\n  shareCount?: number\n}\n\nconst pluralize = require('pluralize')\n\n\nexport const MemeInfo = ({\n  creationTime,\n  discussionCount,\n  shareCount,\n}: IMemeInfoProps) => {\n  const date = creationTime ? new Date(creationTime) : new Date()\n  const [discussionNum, setDiscussionNum] = useState(0)\n  const [shareNum, setShareNum] = useState(0)\n\n  useEffect(() => {\n    if (discussionCount) setDiscussionNum(discussionCount)\n    if (shareCount) setShareNum(shareCount)\n  }, [discussionCount, shareCount])\n\n  const dateString = creationTime\n    ? `${(date.getMonth() + 1)\n      .toString()\n      .padStart(2, '0')}/${date\n        .getDate()\n        .toString()\n        .padStart(2, '0')}/${date\n          .getFullYear()\n          .toString()\n          .padStart(4, '0')} ${date\n            .getHours()\n            .toString()\n            .padStart(2, '0')}:${date\n              .getMinutes()\n              .toString()\n              .padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`\n    : ''\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.date}>\n        <Text>{dateString}</Text>\n      </View>\n      <View style={styles.number}>\n        <Text>{`Discussion: ${discussionNum} > 1 : ${pluralize(\"Discussion\")} : \"Discussion\"`}</Text>\n        <Text>{`Share: ${shareNum} > 1 : ${pluralize(\"Share\")} : \"Share\"`}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  date: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    flex: 1,\n  },\n  number: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    flex: 1,\n  }\n})\n","import React from 'react'\nimport { View, Image, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons';\n\ninterface IMemeImageProps {\n  imageUrl?: string\n}\nexport const MemeImage = ({\n  imageUrl\n}: IMemeImageProps) => {\n  return (\n    <View style={styles.container}>\n      {/* {imageUrl ? <Image source={{ uri: imageUrl }} /> : <AntDesign name=\"picture\" size={96} color=\"black\" />} */}\n      <AntDesign name=\"picture\" size={300} color=\"black\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  }\n})\n","import React, { useEffect, useState } from 'react'\nimport {\n  FlatList,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  Image,\n  ActivityIndicator,\n} from 'react-native'\nimport { HashTagList } from '../View/HashTag/HashTagList'\nimport { FeedbackButton } from '../View/Button/FeedbackButton'\nimport { FeedbackTypeEnums } from '../Enums/FeedbackTypeEnums'\nimport { GET_MEMES_BY_TAG, GET_POPULAR_TAGS } from '../Query/TopicsQuery'\nimport { useQuery } from '@apollo/client'\nimport { IHashTag } from '../Model/IHashTag'\nimport { Meme } from '../Generated/graphqlType'\nimport { User } from '../View/User/User'\nimport { MemeInfo } from '../View/Info/MemeInfo'\nimport { MemeImage } from '../View/Picture/MemeImage'\n\n\nconst Item = ({ item, onPress }: {\n  item: Meme,\n  onPress: (value?: any) => void,\n}) => (\n    <TouchableOpacity onPress={onPress} style={[styles.item, styles.background]}>\n      <View style={styles.memeHeaderInfo}>\n        <User id={item?.author?.id} name={item?.author?.name} />\n        <MemeInfo creationTime={item?.createTime ?? \"\"} />\n      </View>\n      <View>\n        <MemeImage imageUrl={item?.url} />\n      </View>\n      <View>\n        <HashTagList\n          hashtagList={item?.tags?.map(tag => { return { id: tag, text: tag } }) ?? []}\n          showPoundSign={false}\n        />\n      </View>\n      <View style={styles.feedbackButton}>\n        <FeedbackButton initialCount={item?.counter?.likeCount ?? 0} feedbackType={FeedbackTypeEnums.Like} />\n        <FeedbackButton initialCount={item?.counter?.dislikeCount ?? 0} feedbackType={FeedbackTypeEnums.Dislike} />\n      </View>\n    </TouchableOpacity>\n  )\n\nexport default function TopicScreen({ navigation }) {\n  const [selectedId, setSelectedId] = useState(null)\n  const [selectedTag, setSelectedTag] = useState('')\n\n  const { loading: popularTagsIsLoading, data: popularTagsData } = useQuery(\n    GET_POPULAR_TAGS\n  )\n\n  const onSelectTag = (hashTag: IHashTag) => {\n    setSelectedTag(hashTag.text)\n  }\n\n  const { loading: memeTagsIsLoading, data: memeTagsData } = useQuery(\n    GET_MEMES_BY_TAG,\n    {\n      skip: !popularTagsData?.popularTags,\n      variables: {\n        tag: selectedTag,\n      },\n    }\n  )\n\n  const hashtagList = popularTagsIsLoading\n    ? []\n    : popularTagsData.popularTags.map((tag: any) => {\n      return {\n        id: tag,\n        text: tag,\n      }\n    })\n\n  useEffect(() => {\n    if (!selectedTag && hashtagList?.length > 0) {\n      setSelectedTag(hashtagList[0].text)\n    }\n  })\n\n\n  const renderItem = ({ item }: Meme) => {\n    return (\n      <Item\n        item={item}\n        onPress={() => setSelectedId(item.id)}\n      />\n    )\n  }\n\n  return popularTagsIsLoading ? (\n    <View style={[loadingStyles.container, loadingStyles.horizontal]}>\n      <ActivityIndicator size=\"large\" />\n    </View>\n  ) : (\n      <>\n        <HashTagList\n          hashtagList={hashtagList}\n          showPoundSign={false}\n          onSelectionCallBack={onSelectTag}\n        />\n        <SafeAreaView style={styles.container}>\n          <FlatList\n            data={memeTagsData?.memesByTag ?? []}\n            renderItem={renderItem}\n            keyExtractor={(item: Meme) => item.id}\n            extraData={selectedId}\n          />\n        </SafeAreaView>\n      </>\n    )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    backgroundColor: '#ffffff'\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    padding: 20,\n    marginVertical: 1,\n    marginHorizontal: 0,\n    display: 'flex',\n  },\n  memeHeaderInfo: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n  feedbackButton: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n})\n\nconst loadingStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n})\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native'\nimport { FlatGrid } from 'react-native-super-grid'\n\nconst DATA = [\n    { name: 'TURQUOISE', code: '#1abc9c' },\n    { name: 'EMERALD', code: '#2ecc71' },\n    { name: 'PETER RIVER', code: '#3498db' },\n    { name: 'AMETHYST', code: '#9b59b6' },\n    { name: 'WET ASPHALT', code: '#34495e' },\n    { name: 'GREEN SEA', code: '#16a085' },\n    { name: 'NEPHRITIS', code: '#27ae60' },\n    { name: 'BELIZE HOLE', code: '#2980b9' },\n    { name: 'WISTERIA', code: '#8e44ad' },\n    { name: 'MIDNIGHT BLUE', code: '#2c3e50' },\n    { name: 'SUN FLOWER', code: '#f1c40f' },\n    { name: 'CARROT', code: '#e67e22' },\n    { name: 'ALIZARIN', code: '#e74c3c' },\n    { name: 'CLOUDS', code: '#ecf0f1' },\n    { name: 'CONCRETE', code: '#95a5a6' },\n    { name: 'ORANGE', code: '#f39c12' },\n    { name: 'PUMPKIN', code: '#d35400' },\n    { name: 'POMEGRANATE', code: '#c0392b' },\n    { name: 'SILVER', code: '#bdc3c7' },\n    { name: 'ASBESTOS', code: '#7f8c8d' },\n    { name: 'TURQUOISE', code: '#1abc9c' },\n    { name: 'EMERALD', code: '#2ecc71' },\n    { name: 'PETER RIVER', code: '#3498db' },\n    { name: 'AMETHYST', code: '#9b59b6' },\n    { name: 'WET ASPHALT', code: '#34495e' },\n    { name: 'GREEN SEA', code: '#16a085' },\n    { name: 'NEPHRITIS', code: '#27ae60' },\n    { name: 'BELIZE HOLE', code: '#2980b9' },\n    { name: 'WISTERIA', code: '#8e44ad' },\n    { name: 'MIDNIGHT BLUE', code: '#2c3e50' },\n    { name: 'SUN FLOWER', code: '#f1c40f' },\n    { name: 'CARROT', code: '#e67e22' },\n    { name: 'ALIZARIN', code: '#e74c3c' },\n    { name: 'CLOUDS', code: '#ecf0f1' },\n    { name: 'CONCRETE', code: '#95a5a6' },\n    { name: 'ORANGE', code: '#f39c12' },\n    { name: 'PUMPKIN', code: '#d35400' },\n    { name: 'POMEGRANATE', code: '#c0392b' },\n    { name: 'SILVER', code: '#bdc3c7' },\n    { name: 'ASBESTOS', code: '#7f8c8d' },\n]\n\n\nexport default function ProfileScreen({ navigation }) {\n  const [selectedId, setSelectedId] = useState(null)\n  const userData = {\n      isTopInDay: true,\n      date: '2020/07/14',\n      like: 1300,\n      unLike: 100,\n      name: 'A'\n  }\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <FlatGrid\n            itemDimension={100}\n            data={DATA}\n            style={styles.gridView}\n            fixed\n            spacing={16}\n            renderItem={({ item }) => (\n                <View style={[styles.itemContainer, { backgroundColor: item.code }]}>\n                    <Text style={styles.itemName}>{item.name}</Text>\n                    <Text style={styles.itemCode}>{item.code}</Text>\n                </View>\n            )}\n            ListHeaderComponent={() => {\n                return (\n                    <View style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\", marginBottom: 24}}>\n                        <View style={{ \n                                backgroundColor: 'rgba(196, 196, 196, 0.8)', borderRadius: 32, height:64, width: 64,\n                                display: \"flex\", justifyContent: \"center\", alignItems: \"center\"\n                            }}>\n                            <Text>{userData.name}</Text>\n                        </View>\n                        <View style={{ marginLeft: 8}}>\n                            {\n                                userData.isTopInDay ? <Text>榮登 {userData.date } 題王</Text> : null\n                            }\n                            <Text>總獲得喜歡 {userData.like} 討厭 {userData.unLike}</Text>\n                        </View>\n                    </View>\n                )\n            }}\n        />\n      </SafeAreaView>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n    backgroundColor: '#ffffff'\n  },\n  gridView: {\n    marginTop: 10,\n    flex: 1,\n  },\n  itemContainer: {\n    justifyContent: 'flex-end',\n    borderRadius: 5,\n    padding: 10,\n    height: 100,\n  },\n  itemName: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: '600',\n  },\n  itemCode: {\n    fontWeight: '600',\n    fontSize: 12,\n    color: '#fff',\n  },\n})\n","import fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { EnvironmentConfigs } from '../Configs/EnvironmentConfigs'\n\nexport const apolloClient = new ApolloClient({\n  link: new HttpLink({ uri: EnvironmentConfigs.dev.graphQLEndPoint, fetch }),\n  cache: new InMemoryCache(),\n})\n","export const EnvironmentConfigs = {\n    dev: {\n        graphQLEndPoint: \"https://memetalk.herokuapp.com/graphql\" \n    }\n}","import * as React from 'react'\nimport { Text, View } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport TopicScreen from './pages/topic'\nimport ProfileScreen from './pages/profile'\nimport { apolloClient } from './Providers/ApolloClient'\nimport { ApolloProvider } from '@apollo/client'\n\nfunction NotificationsScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text>Notification screen</Text>\n    </View>\n  )\n}\n\nconst TopicStack = createStackNavigator()\n\nfunction TopicStackScreen() {\n  return (\n    <TopicStack.Navigator>\n      <TopicStack.Screen name=\"Topic\" component={TopicScreen} />\n    </TopicStack.Navigator>\n  )\n}\n\nconst ProfileStack = createStackNavigator()\n\nfunction ProfileStackScreen() {\n  return (\n    <ProfileStack.Navigator>\n      <ProfileStack.Screen name=\"Profile\" component={ProfileScreen} />\n    </ProfileStack.Navigator>\n  )\n}\n\nconst NotificationStack = createStackNavigator()\n\nfunction NotificationsStackScreen() {\n  return (\n    <NotificationStack.Navigator>\n      <NotificationStack.Screen\n        name=\"Notifications\"\n        component={NotificationsScreen}\n      />\n    </NotificationStack.Navigator>\n  )\n}\n\nconst Tab = createBottomTabNavigator()\n\nexport default function App() {\n  return (\n    <ApolloProvider client={apolloClient}>\n      <NavigationContainer>\n        <Tab.Navigator>\n          <Tab.Screen name=\"Topic\" component={TopicStackScreen} />\n          <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\n          <Tab.Screen\n            name=\"Notification\"\n            component={NotificationsStackScreen}\n          />\n        </Tab.Navigator>\n      </NavigationContainer>\n    </ApolloProvider>\n  )\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}