{"version":3,"sources":["Enums/FeedbackTypeEnums.ts","View/HashTag/HashTag.tsx","View/HashTag/HashTagList.tsx","View/Button/FeedbackButton.tsx","Query/TopicsQuery.tsx","View/User/User.tsx","View/Info/MemeInfo.tsx","View/Picture/MemeImage.tsx","pages/topic.tsx","pages/profile.tsx","Providers/ApolloClient.tsx","Configs/EnvironmentConfigs.ts","pages/compose.tsx","App.tsx","web-build/register-service-worker.js"],"names":["FeedbackTypeEnums","HashTag","showPoundSign","text","onPressCallback","View","Text","onPress","Item","item","style","TouchableOpacity","styles","title","HashTagList","hashtagList","onSelectionCallBack","useState","selectedId","setSelectedId","length","SafeAreaView","FlatList","list","horizontal","data","renderItem","borderBottomColor","id","borderBottomWidth","backgroundColor","keyExtractor","extraData","StyleSheet","create","height","flexGrow","padding","fontSize","FeedbackButton","initialCount","feedbackType","count","setCount","useEffect","feedbackButton","FontAwesome5","Button","name","Like","size","color","margin","display","flexDirection","flex","justifyContent","borderColor","borderWidth","borderRadius","GET_POPULAR_TAGS","gql","GET_MEMES_BY_TAG","User","imageUrl","user","Image","source","uri","AntDesign","alignItems","pluralize","require","MemeInfo","creationTime","discussionCount","shareCount","creationDate","Date","discussionNum","setDiscussionNum","shareNum","setShareNum","container","date","toLocaleString","number","MemeImage","background","memeHeaderInfo","author","createTime","url","tags","map","tag","counter","likeCount","dislikeCount","Dislike","TopicScreen","navigation","selectedTag","setSelectedTag","useQuery","popularTagsIsLoading","loading","popularTagsData","skip","popularTags","variables","memeTagsData","loadingStyles","ActivityIndicator","hashTag","memesByTag","marginTop","StatusBar","currentHeight","marginVertical","marginHorizontal","DATA","code","ProfileScreen","userData","itemDimension","gridView","fixed","spacing","itemContainer","itemName","itemCode","ListHeaderComponent","marginBottom","width","marginLeft","fontWeight","apolloClient","ApolloClient","link","HttpLink","fetch","cache","InMemoryCache","ComposeScreen","String","image","setImage","a","async","Platform","OS","ImagePicker","status","alert","subTitle","uploadView","uploadBtnLayout","uploadBtn","mediaTypes","All","allowsEditing","aspect","quality","result","console","log","cancelled","buttonText","imageDetail","clearBtnLayout","clearBtn","clearBtnText","inputLayout","placeholder","previewImage","position","textAlign","fontStyle","lineHeight","borderStyle","left","top","transform","translateX","marginRight","right","opacity","TopicStack","createStackNavigator","TopicStackScreen","Navigator","Screen","component","ProfileStack","ProfileStackScreen","ComposeStack","ComposeStackScreen","Tab","createBottomTabNavigator","App","eva","theme","client","NavigationContainer","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.75976b4a.chunk.js","sourcesContent":["export enum FeedbackTypeEnums {\n  Like,\n  Dislike,\n}\n","import React from 'react'\nimport {\n  View,\n  Text,\n  NativeSyntheticEvent,\n  NativeTouchEvent,\n} from 'react-native'\n\ninterface IHashTagProps {\n  showPoundSign?: boolean\n  onPressCallback?: (ev: NativeSyntheticEvent<NativeTouchEvent>) => void\n  text: string\n}\n\nexport const HashTag = ({\n  showPoundSign,\n  text,\n  onPressCallback = () => {},\n}: IHashTagProps) => {\n  return (\n    <View>\n      <Text onPress={onPressCallback}>{showPoundSign ? `#${text}` : text}</Text>\n    </View>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  Text,\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native'\nimport { HashTag } from './HashTag'\nimport { IHashTag } from '../../Model/IHashTag'\n\ninterface IHashTagListProps {\n  hashtagList: IHashTag[]\n  showPoundSign?: boolean\n  onSelectionCallBack?: (item: IHashTag) => void\n}\n\nconst Item = ({ item, onPress, style, showPoundSign }) => (\n  <TouchableOpacity onPress={onPress} style={[styles.item, style]}>\n    <HashTag style={styles.title} {...item} showPoundSign={showPoundSign} />\n  </TouchableOpacity>\n)\n\nexport const HashTagList = ({\n  hashtagList,\n  showPoundSign,\n  onSelectionCallBack = (item: IHashTag): void => {},\n}) => {\n  const [selectedId, setSelectedId] = useState(null)\n\n  const renderItem = ({ item }: { item: IHashTag }) => {\n    const borderBottomColor = item.id === selectedId ? '#E83468' : '#FFFFFF'\n\n    return (\n      <Item\n        showPoundSign={showPoundSign}\n        item={item}\n        onPress={() => {\n          setSelectedId(item.id)\n          onSelectionCallBack(item)\n        }}\n        style={{\n          borderBottomWidth: 'thick',\n          borderBottomColor,\n          backgroundColor: '#FFFFFF',\n        }}\n      />\n    )\n  }\n\n  return hashtagList?.length === 0 ? (\n    <></>\n  ) : (\n    <SafeAreaView>\n      <FlatList<IHashTag>\n        style={styles.list}\n        horizontal\n        data={hashtagList}\n        renderItem={renderItem}\n        keyExtractor={(item) => item?.id}\n        extraData={selectedId}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  list: {\n    height: 50,\n    flexGrow: 0,\n  },\n  item: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 16,\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { FeedbackTypeEnums } from '../../Enums/FeedbackTypeEnums'\nimport { FontAwesome5 } from '@expo/vector-icons'\n\ninterface IFeedbackButtonProps {\n  initialCount?: number;\n  feedbackType: FeedbackTypeEnums\n}\n\nexport const FeedbackButton = ({\n  initialCount,\n  feedbackType\n}: IFeedbackButtonProps) => {\n  const [count, setCount] = useState(0)\n\n\n  useEffect(() => {\n    setCount(initialCount)\n  }, [initialCount])\n\n  return (\n    <View style={styles.feedbackButton}>\n      <FontAwesome5.Button\n        name={\n          feedbackType === FeedbackTypeEnums.Like\n            ? 'thumbs-up'\n            : 'thumbs-down'\n        }\n        backgroundColor=\"#FFFFFF\"\n        onPress={() => setCount(count + 1)}\n        size={24}\n        color=\"black\"\n      ></FontAwesome5.Button>\n      <View style={styles.count}>{count}</View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  feedbackButton: {\n    margin: 10,\n    padding: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'space-between',\n    borderColor: '#C4C4C4',\n    borderWidth: 3,\n    borderRadius: 50,\n  },\n  count: {\n    margin: 10,\n  },\n})\n","import { gql } from '@apollo/client'\n\nexport const GET_POPULAR_TAGS = gql`\n  query Popular_Tags {\n    popularTags\n  }\n`\n\nexport const GET_MEMES_BY_TAG = gql`\n  query Memes_By_Tag($tag: String!) {\n    memesByTag(tag: $tag) {\n      id\n      author {\n        id\n        name\n      }\n      tags\n      url\n      createTime\n      counter {\n        likeCount\n        dislikeCount\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { View, Text, Image, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons';\ninterface IUserProps {\n  id?: string;\n  imageUrl?: string\n  name?: string\n}\nexport const User = ({ id, imageUrl, name }: IUserProps) => {\n  return (\n    <View style={styles.user}>\n      {imageUrl ? <Image source={{ uri: imageUrl }} /> : <AntDesign name=\"user\" size={36} color=\"black\" />}\n      <Text style={styles.name}>{name}</Text>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  user: {\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    margin: 5\n  },\n  name: {\n    margin: 5,\n    display: 'flex',\n    alignItems: 'center'\n  }\n})","import React, { useEffect, useState } from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\ninterface IMemeInfoProps {\n  creationTime?: string\n  discussionCount?: number\n  shareCount?: number\n}\n\nconst pluralize = require('pluralize')\n\n\nexport const MemeInfo = ({\n  creationTime,\n  discussionCount,\n  shareCount,\n}: IMemeInfoProps) => {\n  const creationDate = creationTime ? new Date(creationTime) : new Date()\n  const [discussionNum, setDiscussionNum] = useState(0)\n  const [shareNum, setShareNum] = useState(0)\n\n  useEffect(() => {\n    if (discussionCount) setDiscussionNum(discussionCount)\n    if (shareCount) setShareNum(shareCount)\n  }, [discussionCount, shareCount])\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.date}>\n        <Text>{creationDate.toLocaleString()}</Text>\n      </View>\n      <View style={styles.number}>\n        <Text>{` ${discussionNum} ${discussionNum > 1 ? pluralize(\"Discussion\") : \"Discussion\"} `}</Text>\n        <Text>{` ${shareNum} ${shareNum > 1 ? pluralize(\"Share\") : \"Share\"} `}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  date: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    flex: 1,\n  },\n  number: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    flex: 1,\n  }\n})\n","import React from 'react'\nimport { View, Image, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons';\n\ninterface IMemeImageProps {\n  imageUrl?: string\n}\nexport const MemeImage = ({\n  imageUrl\n}: IMemeImageProps) => {\n  return (\n    <View style={styles.container}>\n      {/* {imageUrl ? <Image source={{ uri: imageUrl }} /> : <AntDesign name=\"picture\" size={96} color=\"black\" />} */}\n      <AntDesign name=\"picture\" size={300} color=\"black\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  }\n})\n","import React, { useEffect, useState } from 'react'\nimport {\n  FlatList,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  Image,\n  ActivityIndicator,\n} from 'react-native'\nimport { HashTagList } from '../View/HashTag/HashTagList'\nimport { FeedbackButton } from '../View/Button/FeedbackButton'\nimport { FeedbackTypeEnums } from '../Enums/FeedbackTypeEnums'\nimport { GET_MEMES_BY_TAG, GET_POPULAR_TAGS } from '../Query/TopicsQuery'\nimport { useQuery } from '@apollo/client'\nimport { IHashTag } from '../Model/IHashTag'\nimport { Meme } from '../Generated/graphqlType'\nimport { User } from '../View/User/User'\nimport { MemeInfo } from '../View/Info/MemeInfo'\nimport { MemeImage } from '../View/Picture/MemeImage'\n\n\nconst Item = ({ item, onPress }: {\n  item: Meme,\n  onPress: (value?: any) => void,\n}) => (\n    <TouchableOpacity onPress={onPress} style={[styles.item, styles.background]}>\n      <View style={styles.memeHeaderInfo}>\n        <User id={item?.author?.id} name={item?.author?.name} />\n        <MemeInfo creationTime={item?.createTime ?? \"\"} />\n      </View>\n      <View>\n        <MemeImage imageUrl={item?.url} />\n      </View>\n      <View>\n        <HashTagList\n          hashtagList={item?.tags?.map(tag => { return { id: tag, text: tag } }) ?? []}\n          showPoundSign={false}\n        />\n      </View>\n      <View style={styles.feedbackButton}>\n        <FeedbackButton initialCount={item?.counter?.likeCount ?? 0} feedbackType={FeedbackTypeEnums.Like} />\n        <FeedbackButton initialCount={item?.counter?.dislikeCount ?? 0} feedbackType={FeedbackTypeEnums.Dislike} />\n      </View>\n    </TouchableOpacity>\n  )\n\nexport default function TopicScreen({ navigation }) {\n  const [selectedId, setSelectedId] = useState(null)\n  const [selectedTag, setSelectedTag] = useState('')\n\n  const { loading: popularTagsIsLoading, data: popularTagsData } = useQuery(\n    GET_POPULAR_TAGS\n  )\n\n  const onSelectTag = (hashTag: IHashTag) => {\n    setSelectedTag(hashTag.text)\n  }\n\n  const { loading: memeTagsIsLoading, data: memeTagsData } = useQuery(\n    GET_MEMES_BY_TAG,\n    {\n      skip: !popularTagsData?.popularTags,\n      variables: {\n        tag: selectedTag,\n      },\n    }\n  )\n\n  const hashtagList = popularTagsIsLoading\n    ? []\n    : popularTagsData.popularTags.map((tag: any) => {\n      return {\n        id: tag,\n        text: tag,\n      }\n    })\n\n  useEffect(() => {\n    if (!selectedTag && hashtagList?.length > 0) {\n      setSelectedTag(hashtagList[0].text)\n    }\n  })\n\n\n  const renderItem = ({ item }: Meme) => {\n    return (\n      <Item\n        item={item}\n        onPress={() => setSelectedId(item.id)}\n      />\n    )\n  }\n\n  return popularTagsIsLoading ? (\n    <View style={[loadingStyles.container, loadingStyles.horizontal]}>\n      <ActivityIndicator size=\"large\" />\n    </View>\n  ) : (\n      <>\n        <HashTagList\n          hashtagList={hashtagList}\n          showPoundSign={false}\n          onSelectionCallBack={onSelectTag}\n        />\n        <SafeAreaView style={styles.container}>\n          <FlatList\n            data={memeTagsData?.memesByTag ?? []}\n            renderItem={renderItem}\n            keyExtractor={(item: Meme) => item.id}\n            extraData={selectedId}\n          />\n        </SafeAreaView>\n      </>\n    )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    backgroundColor: '#ffffff'\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    padding: 20,\n    marginVertical: 1,\n    marginHorizontal: 0,\n    display: 'flex',\n  },\n  memeHeaderInfo: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n  feedbackButton: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n})\n\nconst loadingStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n})\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native'\nimport { FlatGrid } from 'react-native-super-grid'\n\nconst DATA = [\n    { name: 'TURQUOISE', code: '#1abc9c' },\n    { name: 'EMERALD', code: '#2ecc71' },\n    { name: 'PETER RIVER', code: '#3498db' },\n    { name: 'AMETHYST', code: '#9b59b6' },\n    { name: 'WET ASPHALT', code: '#34495e' },\n    { name: 'GREEN SEA', code: '#16a085' },\n    { name: 'NEPHRITIS', code: '#27ae60' },\n    { name: 'BELIZE HOLE', code: '#2980b9' },\n    { name: 'WISTERIA', code: '#8e44ad' },\n    { name: 'MIDNIGHT BLUE', code: '#2c3e50' },\n    { name: 'SUN FLOWER', code: '#f1c40f' },\n    { name: 'CARROT', code: '#e67e22' },\n    { name: 'ALIZARIN', code: '#e74c3c' },\n    { name: 'CLOUDS', code: '#ecf0f1' },\n    { name: 'CONCRETE', code: '#95a5a6' },\n    { name: 'ORANGE', code: '#f39c12' },\n    { name: 'PUMPKIN', code: '#d35400' },\n    { name: 'POMEGRANATE', code: '#c0392b' },\n    { name: 'SILVER', code: '#bdc3c7' },\n    { name: 'ASBESTOS', code: '#7f8c8d' },\n    { name: 'TURQUOISE', code: '#1abc9c' },\n    { name: 'EMERALD', code: '#2ecc71' },\n    { name: 'PETER RIVER', code: '#3498db' },\n    { name: 'AMETHYST', code: '#9b59b6' },\n    { name: 'WET ASPHALT', code: '#34495e' },\n    { name: 'GREEN SEA', code: '#16a085' },\n    { name: 'NEPHRITIS', code: '#27ae60' },\n    { name: 'BELIZE HOLE', code: '#2980b9' },\n    { name: 'WISTERIA', code: '#8e44ad' },\n    { name: 'MIDNIGHT BLUE', code: '#2c3e50' },\n    { name: 'SUN FLOWER', code: '#f1c40f' },\n    { name: 'CARROT', code: '#e67e22' },\n    { name: 'ALIZARIN', code: '#e74c3c' },\n    { name: 'CLOUDS', code: '#ecf0f1' },\n    { name: 'CONCRETE', code: '#95a5a6' },\n    { name: 'ORANGE', code: '#f39c12' },\n    { name: 'PUMPKIN', code: '#d35400' },\n    { name: 'POMEGRANATE', code: '#c0392b' },\n    { name: 'SILVER', code: '#bdc3c7' },\n    { name: 'ASBESTOS', code: '#7f8c8d' },\n]\n\n\nexport default function ProfileScreen({ navigation }) {\n  const [selectedId, setSelectedId] = useState(null)\n  const userData = {\n      isTopInDay: true,\n      date: '2020/07/14',\n      like: 1300,\n      unLike: 100,\n      name: 'A'\n  }\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <FlatGrid\n            itemDimension={100}\n            data={DATA}\n            style={styles.gridView}\n            fixed\n            spacing={16}\n            renderItem={({ item }) => (\n                <View style={[styles.itemContainer, { backgroundColor: item.code }]}>\n                    <Text style={styles.itemName}>{item.name}</Text>\n                    <Text style={styles.itemCode}>{item.code}</Text>\n                </View>\n            )}\n            ListHeaderComponent={() => {\n                return (\n                    <View style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\", marginBottom: 24}}>\n                        <View style={{ \n                                backgroundColor: 'rgba(196, 196, 196, 0.8)', borderRadius: 32, height:64, width: 64,\n                                display: \"flex\", justifyContent: \"center\", alignItems: \"center\"\n                            }}>\n                            <Text>{userData.name}</Text>\n                        </View>\n                        <View style={{ marginLeft: 8}}>\n                            {\n                                userData.isTopInDay ? <Text>榮登 {userData.date } 題王</Text> : null\n                            }\n                            <Text>總獲得喜歡 {userData.like} 討厭 {userData.unLike}</Text>\n                        </View>\n                    </View>\n                )\n            }}\n        />\n      </SafeAreaView>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n    backgroundColor: '#ffffff'\n  },\n  gridView: {\n    marginTop: 10,\n    flex: 1,\n  },\n  itemContainer: {\n    justifyContent: 'flex-end',\n    borderRadius: 5,\n    padding: 10,\n    height: 100,\n  },\n  itemName: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: '600',\n  },\n  itemCode: {\n    fontWeight: '600',\n    fontSize: 12,\n    color: '#fff',\n  },\n})\n","import fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { EnvironmentConfigs } from '../Configs/EnvironmentConfigs'\n\nexport const apolloClient = new ApolloClient({\n  link: new HttpLink({ uri: EnvironmentConfigs.dev.graphQLEndPoint, fetch }),\n  cache: new InMemoryCache(),\n})","export const EnvironmentConfigs = {\n    dev: {\n        graphQLEndPoint: \"https://memetalk.herokuapp.com/graphql\" \n    }\n}","import React, { useEffect, useState } from 'react'\nimport {\n  Button,\n  Image,\n  Platform,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native'\nimport * as ImagePicker from 'expo-image-picker';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { Input } from '@ui-kitten/components';\n// import requestMediaLibraryPermissionsAsync from 'expo-image-picker'\n\nexport default function ComposeScreen() {\n    const [image, setImage] = useState(null || String);\n\n    useEffect(() => {\n        (async () => {\n        if (Platform.OS !== 'web') {\n            const { status } = await ImagePicker.requestCameraPermissionsAsync();\n            if (status !== 'granted') {\n            alert('Sorry, we need camera roll permissions to make this work!');\n            }\n        }\n        })();\n    }, []);\n\n    const pickImage = async () => {\n      let result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 1,\n      });\n  \n      console.log(result);\n  \n      if (!result.cancelled) {\n        setImage(result?.uri);\n      }\n    };\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.title}>MEME</Text>\n        <Text style={styles.subTitle}>選個主題發聲吧</Text>\n        <View style={styles.uploadView}>\n          <View style={styles.uploadBtnLayout} >\n            <TouchableOpacity style={styles.uploadBtn} onPress={pickImage} >\n              <Text style={styles.buttonText}> 上傳圖片發布心情 </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n        {\n          image ? \n            <View style={styles.imageDetail}>\n              <View style={styles.clearBtnLayout} >\n                <TouchableOpacity style={styles.clearBtn} onPress={() => {setImage('')}} >\n                  <Text style={styles.clearBtnText}> X </Text>\n                </TouchableOpacity>\n              </View>\n              <View style={styles.inputLayout} >\n                <Input placeholder='輸入標籤' />\n                <Text style={styles.tag}>#職場 \b#霸凌 #狗 #貓奴</Text>\n              </View>\n              <Image source={{ uri: image }} style={ styles.previewImage} />\n              <View style={styles.uploadBtnLayout} >\n                <TouchableOpacity style={styles.uploadBtn} onPress={() => {}} >\n                  <Text style={styles.buttonText}> 送出 </Text>\n                </TouchableOpacity>\n              </View>\n            \n            </View>\n           : null\n        }\n      </SafeAreaView>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n    backgroundColor: '#ffffff',\n    position: 'relative'\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 24,\n    fontWeight: '700',\n    fontStyle: 'normal',\n    lineHeight: 28\n  },\n  subTitle: {\n    marginTop: 12,\n    textAlign: 'center',\n    fontSize: 14,\n    fontWeight: '400',\n    fontStyle: 'normal',\n    lineHeight: 16\n  },\n  uploadView: {\n    margin: 20,\n    borderStyle: 'dashed',\n    borderWidth: 1,\n    borderColor: 'black',\n    flex: 1,\n  },\n  uploadBtnLayout: {\n    position: 'absolute',\n    left: '50%',\n    top: '60%',\n    transform: [{\n      translateX: -75\n    }]\n  },\n  uploadBtn: {\n    width: 150,\n    backgroundColor: '#C4C4C4',\n    padding: 8,\n  },\n  previewImage: {\n    width: 300, \n    height: 300,\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    marginTop: '10%',\n    borderRadius: 10\n\n  },\n  buttonText: {\n    textAlign: 'center'\n  },\n  imageDetail: {\n    position: 'absolute',\n    height: '100vh',\n    width: '100vw',\n    left: 0,\n    top: 0,\n    backgroundColor: '#F0F0F0',\n    marginTop: '10%'\n  },\n  clearBtnLayout: {\n    position: 'absolute',\n    right: 20,\n    top: 20\n  },\n  clearBtn: {\n    width: 'auto',\n    height: 'auto'\n  },\n  clearBtnText: {\n    fontSize: 20,\n    textAlign: 'center'\n  },\n  inputLayout: {\n    width: '70%',\n    marginTop: '10%',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  tag: {\n    color: '#000000',\n    opacity: 0.4,\n    fontSize: 14,\n    lineHeight: 17\n  }\n\n})\n","import * as React from 'react'\nimport * as eva from '@eva-design/eva';\nimport { Text, View } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport TopicScreen from './pages/topic'\nimport ProfileScreen from './pages/profile'\nimport { apolloClient } from './Providers/ApolloClient'\nimport { ApolloProvider } from '@apollo/client'\nimport { ApplicationProvider} from '@ui-kitten/components';\nimport ComposeScreen from './pages/compose';\n\nconst TopicStack = createStackNavigator()\n\nfunction TopicStackScreen() {\n  return (\n    <TopicStack.Navigator>\n      <TopicStack.Screen name=\"Topic\" component={TopicScreen} />\n    </TopicStack.Navigator>\n  )\n}\n\nconst ProfileStack = createStackNavigator()\n\nfunction ProfileStackScreen() {\n  return (\n    <ProfileStack.Navigator>\n      <ProfileStack.Screen name=\"Profile\" component={ProfileScreen} />\n    </ProfileStack.Navigator>\n  )\n}\n\nconst ComposeStack = createStackNavigator()\n\nfunction ComposeStackScreen() {\n  return (\n    <ComposeStack.Navigator>\n      <ComposeStack.Screen name=\"Compose\" component={ComposeScreen}/>\n    </ComposeStack.Navigator>\n  )\n}\n\nconst Tab = createBottomTabNavigator()\n\nexport default function App() {\n  return (\n    <ApplicationProvider {...eva} theme={eva.light}>\n    <ApolloProvider client={apolloClient}>\n      <NavigationContainer>\n        <Tab.Navigator>\n          <Tab.Screen name=\"Topic\" component={TopicStackScreen} />\n          <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\n          <Tab.Screen name=\"Compose\" component={ComposeStackScreen}/>\n        </Tab.Navigator>\n      </NavigationContainer>\n    </ApolloProvider>\n    </ApplicationProvider>\n\n  )\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}