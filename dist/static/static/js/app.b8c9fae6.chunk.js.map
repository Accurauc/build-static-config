{"version":3,"sources":["assets/logo.png","Configs/EnvironmentConfigs.ts","Apollo/ApolloClient.tsx","Helper/Storage.ts","Provider/AuthProvider.tsx","Screens/ComposeScreen.tsx","Constants/Color.ts","Query/TopicsQuery.tsx","Enums/FeedbackTypeEnums.ts","View/User/User.tsx","View/Profile/Profile.tsx","Screens/ProfileScreen.tsx","View/HashTag/HashTag.tsx","View/HashTag/HashTagList.tsx","View/Button/FeedbackButton.tsx","View/Info/MemeInfo.tsx","View/Picture/MemeImage.tsx","Screens/TopicScreen.tsx","Screens/HomeScreen.tsx","Query/UserQuery.tsx","Screens/SignUpScreen.tsx","Screens/SignInScreen.tsx","Screens/LogInScreen.tsx","Screens/SplashScreen.tsx","Screens/AppScreen.tsx","App.tsx"],"names":["module","exports","EnvironmentConfigs","graphQLEndPoint","apolloClient","ApolloClient","link","HttpLink","uri","fetch","cache","InMemoryCache","setStorageItem","key","value","Platform","OS","AsyncStorage","setItem","SecureStore","setItemAsync","AuthStateContext","React","AuthDispatchContext","AuthContext","AuthProvider","children","prevState","action","type","userToken","token","isLoading","isSignout","Error","state","dispatch","authContext","signIn","data","a","async","signOut","signUp","useEffect","getItem","getItemAsync","bootstrapAsync","Provider","ComposeScreen","useState","image","setImage","tagsString","setTagsString","authStateContext","useContext","ImagePicker","status","alert","SafeAreaView","style","styles","container","Text","title","subTitle","View","uploadView","uploadBtnLayout","uploadBtn","onPress","mediaTypes","Images","allowsEditing","aspect","quality","result","cancelled","buttonText","imageDetail","clearBtnLayout","clearBtn","clearBtnText","inputLayout","placeholder","onChangeText","text","tag","Image","source","previewImage","tags","replace","split","filter","el","file","dataURI","splitDataURI","byteString","indexOf","atob","decodeURI","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","DataURIToBlob","form","FormData","append","JSON","stringify","method","body","headers","Authorization","then","res","json","catch","err","StyleSheet","create","flex","marginTop","StatusBar","currentHeight","backgroundColor","position","textAlign","fontSize","fontWeight","fontStyle","lineHeight","margin","borderStyle","borderWidth","borderColor","left","top","transform","translateX","width","padding","height","marginRight","marginLeft","borderRadius","right","color","opacity","tagColorList","FeedbackTypeEnums","GET_POPULAR_TAGS","gql","GET_CURRENT_USER","GET_MEMES_BY_TAG","GET_MEMES_BY_AUTHORID","User","id","customizedStyles","imageUrl","name","user","AntDesign","size","display","flexDirection","alignItems","Profile","justifyContent","ProfileScreen","navigation","setSelectedId","useQuery","currentUserIsLoading","loading","currentUserData","skip","currentUser","variables","userId","authMemeIsLoading","authMemeData","memeLIst","memesByAuthorId","map","meme","loadingStyles","horizontal","ActivityIndicator","itemDimension","flatten","gridView","fixed","spacing","renderItem","item","bgColor","Math","floor","random","TouchableOpacity","itemContainer","join","itemCode","HashTag","showPoundSign","onPressCallback","Item","HashTagList","hashtagList","onSelectionCallBack","selectedId","FlatList","list","borderBottomColor","borderBottomWidth","keyExtractor","extraData","flexGrow","FeedbackButton","initialCount","feedbackType","count","setCount","feedbackButton","FontAwesome5","Button","Like","pluralize","require","MemeInfo","creationTime","discussionCount","shareCount","creationDate","Date","discussionNum","setDiscussionNum","shareNum","setShareNum","date","toLocaleString","number","MemeImage","background","memeHeaderInfo","author","createTime","url","counter","likeCount","dislikeCount","Dislike","TopicScreen","selectedTag","setSelectedTag","popularTagsIsLoading","popularTagsData","popularTags","memeTagsData","hashTag","memesByTag","marginVertical","marginHorizontal","Tab","createBottomTabNavigator","TopicStack","createStackNavigator","ProfileStack","ComposeStack","TopicStackScreen","Navigator","Screen","component","ProfileStackScreen","ComposeStackScreen","HomeScreen","SIGNUP_USER","SIGNIN_USER","logo","SignUpScreen","client","useApolloClient","email","setEmail","password","setPassword","setName","logoW","setLogow","logoH","setLogoh","modalMsg","setModalMsg","isModalVisible","setIsModalVisible","getSize","Modal","transparent","animationType","visible","modal","centeredView","modalView","modalText","openButton","inputControl","inputView","TextInput","inputText","placeholderTextColor","secureTextEntry","button","e","mutate","mutation","userInfo","username","createUser","message","console","log","loginText","minWidth","forgot","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","marginBottom","SignInScreen","login","navigate","LogInScreen","Stack","initialRouteName","SplashScreen","AppScreen","NavigationContainer","headerMode","options","animationTypeForReplace","headerShown","App","eva","theme"],"mappings":"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","file":"static/js/app.b8c9fae6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.92e270c4.png\";","export const EnvironmentConfigs = {\n    dev: {\n        graphQLEndPoint: \"https://metu-api.herokuapp.com/graphql\"\n    }\n}","import fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\nimport { EnvironmentConfigs } from '../Configs/EnvironmentConfigs'\n\nexport const apolloClient = new ApolloClient({\n  link: new HttpLink({ uri: EnvironmentConfigs.dev.graphQLEndPoint, fetch }),\n  cache: new InMemoryCache(),\n})","import { Platform } from 'react-native';\nimport { SecureStore } from 'expo';\nimport AsyncStorage from '@react-native-community/async-storage';\n\nexport const setStorageItem = (key: string, value: string) => {\n  if (Platform.OS === 'web') {\n    return AsyncStorage.setItem(key, value);\n  } else {\n    return SecureStore.setItemAsync(key, value);\n  }\n}\n\nexport const getStorageItem = (key: string) => {\n  if (Platform.OS === 'web') {\n    return AsyncStorage.getItem(key);\n  } else {\n    return SecureStore.getItemAsync(key);\n  }\n}\n\n","import * as React from 'react'\nimport { useEffect } from 'react'\nimport { LoginUser } from '../Generated/graphqlType'\nimport { getStorageItem } from '../Helper/Storage'\n\ntype Action = { type: 'RESTORE_TOKEN' | 'SIGN_IN' | 'SIGN_OUT'; token?: string | null }\ntype Dispatch = (action: Action) => void\ntype State = { isLoading: boolean; isSignout: boolean; userToken?: string | null }\ntype AuthProviderProps = { children: React.ReactNode }\n\nexport const AuthStateContext = React.createContext({} as State)\nexport const AuthDispatchContext = React.createContext({} as Dispatch)\nexport const AuthContext = React.createContext({})\n\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n    const [state, dispatch] = React.useReducer(\n        (prevState: State, action: Action) => {\n            switch (action.type) {\n                case 'RESTORE_TOKEN':\n                    return {\n                        ...prevState,\n                        userToken: action.token,\n                        isLoading: false,\n                    };\n                case 'SIGN_IN':\n                    return {\n                        ...prevState,\n                        isSignout: false,\n                        userToken: action.token,\n                    };\n                case 'SIGN_OUT':\n                    return {\n                        ...prevState,\n                        isSignout: true,\n                        userToken: null,\n                    };\n                default: {\n                    throw new Error(`Unhandled action type: ${action.type}`)\n                }\n            }\n        },\n        {\n            isLoading: true,\n            isSignout: false,\n            userToken: null,\n        }\n    );\n\n    const authContext = React.useMemo(\n        () => ({\n            signIn: async (data: LoginUser) => {\n                // In a production app, we need to send some data (usually username, password) to server and get a token\n                // We will also need to handle errors if sign in failed\n                // After getting token, we need to persist the token using `AsyncStorage`\n                dispatch({ type: 'SIGN_IN', token: data?.token ?? null });\n            },\n            signOut: () => dispatch({ type: 'SIGN_OUT' }),\n            signUp: async (data: LoginUser) => {\n                // In a production app, we need to send user data to server and get a token\n                // We will also need to handle errors if sign up failed\n                // After getting token, we need to persist the token using `AsyncStorage`\n                dispatch({ type: 'SIGN_IN', token: data?.token ?? null });\n            },\n        }),\n        []\n    );\n\n    useEffect(() => {\n\n        // Fetch the token from storage then navigate to our appropriate place\n        const bootstrapAsync = async () => {\n            let userToken: LoginUser\n            try {\n                userToken = await getStorageItem('userToken') as LoginUser\n\n                // After restoring token, we may need to validate it in production apps\n                // This will switch to the App screen or Auth screen and this loading\n                // screen will be unmounted and thrown away.\n                dispatch({ type: 'RESTORE_TOKEN', token: userToken?.token ?? null })\n            } catch (e) {\n                // Restoring token failed\n            }\n        }\n\n        bootstrapAsync()\n\n        return () => {\n        };\n    }, [])\n\n    return (\n        <AuthStateContext.Provider value={state}>\n            <AuthDispatchContext.Provider value={dispatch}>\n                <AuthContext.Provider value={authContext}>\n                    {children}\n                </AuthContext.Provider>\n            </AuthDispatchContext.Provider>\n        </AuthStateContext.Provider>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  Image,\n  Platform,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native'\nimport * as ImagePicker from 'expo-image-picker';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { Input } from '@ui-kitten/components';\nimport { AuthStateContext } from \"../Provider/AuthProvider\";\nimport { EnvironmentConfigs } from '../Configs/EnvironmentConfigs';\n\nexport const ComposeScreen = () => {\n  const [image, setImage] = useState('');\n  const [tagsString, setTagsString] = useState('');\n  const authStateContext = React.useContext(AuthStateContext);\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestCameraPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    if (!result.cancelled) {\n      setImage(result?.uri);\n    }\n  };\n\n  function DataURIToBlob(dataURI: string) {\n    const splitDataURI = dataURI.split(',')\n    const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1])\n    const mimeString = splitDataURI[0].split(':')[1].split(';')[0]\n\n    const ia = new Uint8Array(byteString.length)\n    for (let i = 0; i < byteString.length; i++)\n        ia[i] = byteString.charCodeAt(i)\n\n    return new Blob([ia], { type: mimeString })\n  }\n\n  const submitImage = () => {\n    const tags = tagsString.replace(' ', '').split('#').filter( el => el !== '');\n\n    const file = DataURIToBlob(image);\n    const form = new FormData();\n    form.append(\"operations\", `{ \\\"query\\\": \\\"mutation ($file: File!, $tags: [String!]) { createMeme(file: $file, tags: $tags) { tags } }\\\", \\\"variables\\\": { \\\"file\\\": null, \\\"tags\\\": ${JSON.stringify(tags)} } }`);\n    form.append(\"map\", \"{ \\\"0\\\": [\\\"variables.file\\\"] }\");\n    form.append(\"file\", file, 'meme.png');\n    fetch(`${EnvironmentConfigs.dev.graphQLEndPoint}`, {\n      method: 'POST',\n      body: form,\n      headers: {\n        Authorization: `Bearer ${authStateContext.userToken}`\n      }\n    })\n    .then(res => res.json())\n    .then(res => {\n      // upload finished and init all state\n      setImage('');\n      setTagsString('');\n    })\n    .catch( err => {\n      // upload failed\n    })\n    \n  }\n\n  return (\n    <>\n      <SafeAreaView style={styles.container}>\n        <Text style={styles.title}>MEME</Text>\n        <Text style={styles.subTitle}>選個主題發聲吧</Text>\n        <View style={styles.uploadView}>\n          <View style={styles.uploadBtnLayout} >\n            <TouchableOpacity style={styles.uploadBtn} onPress={pickImage} >\n              <Text style={styles.buttonText}> 上傳圖片發布心情 </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n        {\n          image ?\n            <View style={styles.imageDetail}>\n              <View style={styles.clearBtnLayout} >\n                <TouchableOpacity style={styles.clearBtn} onPress={() => { setImage('') }} >\n                  <Text style={styles.clearBtnText}> X </Text>\n                </TouchableOpacity>\n              </View>\n              <View style={styles.inputLayout} >\n                <Input placeholder='輸入標籤' onChangeText={(text: string) => {setTagsString(text)}}/>\n                <Text style={styles.tag}>#職場 \b#霸凌 #狗 #貓奴</Text>\n              </View>\n              <Image source={{ uri: image }} style={styles.previewImage} />\n              <View style={styles.uploadBtnLayout} >\n                <TouchableOpacity style={styles.uploadBtn} onPress={submitImage} >\n                  <Text style={styles.buttonText}> 送出 </Text>\n                </TouchableOpacity>\n              </View>\n\n            </View>\n            : null\n        }\n      </SafeAreaView>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n    backgroundColor: '#ffffff',\n    position: 'relative'\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 24,\n    fontWeight: '700',\n    fontStyle: 'normal',\n    lineHeight: 28\n  },\n  subTitle: {\n    marginTop: 12,\n    textAlign: 'center',\n    fontSize: 14,\n    fontWeight: '400',\n    fontStyle: 'normal',\n    lineHeight: 16\n  },\n  uploadView: {\n    margin: 20,\n    borderStyle: 'dashed',\n    borderWidth: 1,\n    borderColor: 'black',\n    flex: 1,\n  },\n  uploadBtnLayout: {\n    position: 'absolute',\n    left: '50%',\n    top: '60%',\n    transform: [{\n      translateX: -75\n    }]\n  },\n  uploadBtn: {\n    width: 150,\n    backgroundColor: '#C4C4C4',\n    padding: 8,\n  },\n  previewImage: {\n    width: 300,\n    height: 300,\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    marginTop: '10%',\n    borderRadius: 10\n\n  },\n  buttonText: {\n    textAlign: 'center'\n  },\n  imageDetail: {\n    position: 'absolute',\n    height: '100vh',\n    width: '100vw',\n    left: 0,\n    top: 0,\n    backgroundColor: '#F0F0F0',\n    marginTop: '10%'\n  },\n  clearBtnLayout: {\n    position: 'absolute',\n    right: 20,\n    top: 20\n  },\n  clearBtn: {\n    width: 'auto',\n    height: 'auto'\n  },\n  clearBtnText: {\n    fontSize: 20,\n    textAlign: 'center'\n  },\n  inputLayout: {\n    width: '70%',\n    marginTop: '10%',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  tag: {\n    color: '#000000',\n    opacity: 0.4,\n    fontSize: 14,\n    lineHeight: 17\n  }\n\n})\n","export const tagColorList = [\n    '#1abc9c',\n    '#2ecc71',\n    '#3498db',\n    '#9b59b6',\n    '#34495e',\n    '#16a085',\n    '#27ae60',\n    '#2980b9',\n    '#8e44ad',\n    '#2c3e50',\n    '#f1c40f',\n    '#e67e22',\n    '#e74c3c',\n    '#ecf0f1',\n    '#95a5a6',\n    '#f39c12',\n    '#d35400',\n    '#c0392b',\n    '#bdc3c7',\n    '#7f8c8d',\n    '#1abc9c',\n    '#2ecc71',\n    '#3498db',\n    '#9b59b6',\n    '#34495e',\n    '#16a085',\n    '#27ae60',\n    '#2980b9',\n    '#8e44ad',\n    '#2c3e50',\n    '#f1c40f',\n    '#e67e22',\n    '#e74c3c',\n    '#ecf0f1',\n    '#95a5a6',\n    '#f39c12',\n    '#d35400',\n    '#c0392b',\n    '#bdc3c7',\n    '#7f8c8d',\n  ]","import { gql } from '@apollo/client'\n\nexport const GET_POPULAR_TAGS = gql`\n  query Popular_Tags {\n    popularTags\n  }\n`\n\nexport const GET_CURRENT_USER = gql`\n  query Current_User {\n    currentUser {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_MEMES_BY_TAG = gql`\n  query Memes_By_Tag($tag: String!) {\n    memesByTag(tag: $tag) {\n      id\n      author {\n        id\n        name\n      }\n      tags\n      url\n      createTime\n      counter {\n        likeCount\n        dislikeCount\n      }\n    }\n  }\n`\n\nexport const GET_MEMES_BY_AUTHORID = gql`\n  query Memes_By_AuthorId($userId: ID!) {\n    memesByAuthorId(userId: $userId) {\n      id\n      author {\n        id\n        name\n      }\n      tags\n      url\n      createTime\n      counter {\n        likeCount\n        dislikeCount\n      }\n    }\n  }\n`\n","export enum FeedbackTypeEnums {\n  Like,\n  Dislike,\n}\n","import React from 'react'\nimport { View, Text, Image, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons';\n\nexport interface IUserProps {\n  id?: string;\n  imageUrl?: string\n  name?: string\n  customizedStyles?: any;\n}\n\nexport const User = ({ id, customizedStyles, imageUrl, name }: IUserProps) => {\n  return (\n    <View style={[styles.user, customizedStyles ? customizedStyles.user :{}]}>\n      {imageUrl ? <Image source={{ uri: imageUrl }} /> : <AntDesign name=\"user\" size={36} color=\"black\" />}\n      <Text style={styles.name}>{name}</Text>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  user: {\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    margin: 5\n  },\n  name: {\n    margin: 5,\n    display: 'flex',\n    alignItems: 'center'\n  }\n})","import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\nimport { IUserProps, User } from '../User/User'\n\nexport interface IProfileProps extends IUserProps{\n}\nexport const Profile = ({ id, customizedStyles, imageUrl, name }: IProfileProps) => {\n  return (\n    <View style={styles.container}>\n        <User id={id} name={name} customizedStyles={styles}/>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    backgroundColor: 'white'\n  },\n  user: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    flex: 1,\n    margin: 5\n  }\n})\n","import { useQuery } from '@apollo/client'\nimport React, { useState } from 'react'\nimport {\n  ActivityIndicator,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native'\nimport { FlatGrid } from 'react-native-super-grid'\nimport { tagColorList } from '../Constants/Color'\nimport { GET_CURRENT_USER, GET_MEMES_BY_AUTHORID } from '../Query/TopicsQuery'\nimport { Profile } from '../View/Profile/Profile'\n\nexport const ProfileScreen = ({ navigation }) => {\n  const [selectedId, setSelectedId] = useState(null)\n  const { loading: currentUserIsLoading, data: currentUserData } = useQuery(\n    GET_CURRENT_USER\n  )\n  const { loading: authMemeIsLoading, data: authMemeData } = useQuery(\n    GET_MEMES_BY_AUTHORID,\n    {\n      skip: !currentUserData?.currentUser,\n      variables: {\n        userId: currentUserData?.currentUser?.id,\n      },\n    }\n  )\n\n  const memeLIst = authMemeIsLoading\n    ? []\n    : authMemeData\n      ? authMemeData.memesByAuthorId.map((meme: any) => {\n        return {\n          id: meme.id,\n          tags: meme.tags,\n        }\n      })\n      : []\n\n  const renderItem = ({ item }) => {\n    const bgColor =\n      tagColorList[Math.floor(Math.random() * Math.floor(tagColorList.length))]\n    return (\n      <TouchableOpacity onPress={() => setSelectedId(item.id)}>\n        <View style={[styles.itemContainer, { backgroundColor: bgColor }]}>\n          <Text style={styles.tags}>{item.tags.join(',')}</Text>\n        </View>\n      </TouchableOpacity>\n    )\n  }\n\n  return (\n    <>\n      {currentUserIsLoading ? (\n        <View style={[loadingStyles.container, loadingStyles.horizontal]}>\n          <ActivityIndicator size=\"large\" />\n        </View>\n      ) : (\n          <Profile {...currentUserData?.currentUser} />\n        )}\n      {authMemeIsLoading ? (\n        <View style={[loadingStyles.container, loadingStyles.horizontal]}>\n          <ActivityIndicator size=\"large\" />\n        </View>\n      ) : (\n          <SafeAreaView style={styles.container}>\n            <FlatGrid\n              itemDimension={100}\n              data={memeLIst}\n              style={StyleSheet.flatten(styles.gridView)}\n              fixed\n              spacing={16}\n              renderItem={renderItem}\n            />\n          </SafeAreaView>\n        )}\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n    backgroundColor: '#ffffff',\n  },\n  gridView: {\n    marginTop: 10,\n    flex: 1,\n  },\n  itemContainer: {\n    justifyContent: 'flex-end',\n    borderRadius: 5,\n    padding: 10,\n    height: 100,\n  },\n  tags: {\n    fontSize: 16,\n    color: '#fff',\n    fontWeight: '600',\n  },\n  itemCode: {\n    fontWeight: '600',\n    fontSize: 12,\n    color: '#fff',\n  },\n})\n\nconst loadingStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n})\n","import React from 'react'\nimport {\n  View,\n  Text,\n  NativeSyntheticEvent,\n  NativeTouchEvent,\n} from 'react-native'\n\ninterface IHashTagProps {\n  showPoundSign?: boolean\n  onPressCallback?: (ev: NativeSyntheticEvent<NativeTouchEvent>) => void\n  text: string\n}\n\nexport const HashTag = ({\n  showPoundSign,\n  text,\n  onPressCallback = () => {},\n}: IHashTagProps) => {\n  return (\n    <View>\n      <Text onPress={onPressCallback}>{showPoundSign ? `#${text}` : text}</Text>\n    </View>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  SafeAreaView,\n  Text,\n  FlatList,\n  StatusBar,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native'\nimport { HashTag } from './HashTag'\nimport { IHashTag } from '../../Model/IHashTag'\n\ninterface IHashTagListProps {\n  hashtagList: IHashTag[]\n  showPoundSign?: boolean\n  onSelectionCallBack?: (item: IHashTag) => void\n}\n\nconst Item = ({ item, onPress, style, showPoundSign }) => (\n  <TouchableOpacity onPress={onPress} style={[styles.item, style]}>\n    <HashTag style={styles.title} {...item} showPoundSign={showPoundSign} />\n  </TouchableOpacity>\n)\n\nexport const HashTagList = ({\n  hashtagList,\n  showPoundSign,\n  onSelectionCallBack = (item: IHashTag): void => {},\n}) => {\n  const [selectedId, setSelectedId] = useState(null)\n\n  const renderItem = ({ item }: { item: IHashTag }) => {\n    const borderBottomColor = item.id === selectedId ? '#E83468' : '#FFFFFF'\n\n    return (\n      <Item\n        showPoundSign={showPoundSign}\n        item={item}\n        onPress={() => {\n          setSelectedId(item.id)\n          onSelectionCallBack(item)\n        }}\n        style={{\n          borderBottomWidth: 'thick',\n          borderBottomColor,\n          backgroundColor: '#FFFFFF',\n        }}\n      />\n    )\n  }\n\n  return hashtagList?.length === 0 ? (\n    <></>\n  ) : (\n    <SafeAreaView>\n      <FlatList<IHashTag>\n        style={styles.list}\n        horizontal\n        data={hashtagList}\n        renderItem={renderItem}\n        keyExtractor={(item) => item?.id}\n        extraData={selectedId}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  list: {\n    height: 50,\n    flexGrow: 0,\n  },\n  item: {\n    padding: 20,\n  },\n  title: {\n    fontSize: 16,\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { FeedbackTypeEnums } from '../../Enums/FeedbackTypeEnums'\nimport { FontAwesome5 } from '@expo/vector-icons'\n\ninterface IFeedbackButtonProps {\n  initialCount?: number;\n  feedbackType: FeedbackTypeEnums\n}\n\nexport const FeedbackButton = ({\n  initialCount,\n  feedbackType\n}: IFeedbackButtonProps) => {\n  const [count, setCount] = useState(0)\n\n\n  useEffect(() => {\n    setCount(initialCount || 0)\n  }, [initialCount])\n\n  return (\n    <View style={styles.feedbackButton}>\n      <FontAwesome5.Button\n        name={\n          feedbackType === FeedbackTypeEnums.Like\n            ? 'thumbs-up'\n            : 'thumbs-down'\n        }\n        backgroundColor=\"#FFFFFF\"\n        onPress={() => setCount(count + 1)}\n        size={24}\n        color=\"black\"\n      ></FontAwesome5.Button>\n      <View style={styles.count}>{count}</View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  feedbackButton: {\n    margin: 10,\n    padding: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'space-between',\n    borderColor: '#C4C4C4',\n    borderWidth: 3,\n    borderRadius: 50,\n  },\n  count: {\n    margin: 10,\n  },\n})\n","import React, { useEffect, useState } from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\ninterface IMemeInfoProps {\n  creationTime?: string\n  discussionCount?: number\n  shareCount?: number\n}\n\nconst pluralize = require('pluralize')\n\nexport const MemeInfo = ({\n  creationTime,\n  discussionCount,\n  shareCount,\n}: IMemeInfoProps) => {\n  const creationDate = creationTime ? new Date(creationTime) : new Date()\n  const [discussionNum, setDiscussionNum] = useState(0)\n  const [shareNum, setShareNum] = useState(0)\n\n  useEffect(() => {\n    if (discussionCount) setDiscussionNum(discussionCount)\n    if (shareCount) setShareNum(shareCount)\n  }, [discussionCount, shareCount])\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.date}>\n        <Text>{creationDate.toLocaleString()}</Text>\n      </View>\n      <View style={styles.number}>\n        <Text>{` ${discussionNum} ${\n          discussionNum > 1 ? pluralize('Discussion') : 'Discussion'\n        } `}</Text>\n        <Text>{` ${shareNum} ${\n          shareNum > 1 ? pluralize('Share') : 'Share'\n        } `}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  date: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    flex: 1,\n  },\n  number: {\n    display: 'flex',\n    flexDirection: 'row-reverse',\n    flex: 1,\n  },\n})\n","import React from 'react'\nimport { View, Image, StyleSheet } from 'react-native'\nimport { AntDesign } from '@expo/vector-icons';\n\ninterface IMemeImageProps {\n  imageUrl?: string\n}\nexport const MemeImage = ({\n  imageUrl\n}: IMemeImageProps) => {\n  return (\n    <View style={styles.container}>\n      {/* {imageUrl ? <Image source={{ uri: imageUrl }} /> : <AntDesign name=\"picture\" size={96} color=\"black\" />} */}\n      <AntDesign name=\"picture\" size={300} color=\"black\" />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly'\n  }\n})\n","import React, { useEffect, useState } from 'react'\nimport {\n  FlatList,\n  SafeAreaView,\n  StatusBar,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  ActivityIndicator,\n} from 'react-native'\nimport { HashTagList } from '../View/HashTag/HashTagList'\nimport { FeedbackButton } from '../View/Button/FeedbackButton'\nimport { FeedbackTypeEnums } from '../Enums/FeedbackTypeEnums'\nimport { GET_MEMES_BY_TAG, GET_POPULAR_TAGS } from '../Query/TopicsQuery'\nimport { useQuery } from '@apollo/client'\nimport { IHashTag } from '../Model/IHashTag'\nimport { Meme } from '../Generated/graphqlType'\nimport { User } from '../View/User/User'\nimport { MemeInfo } from '../View/Info/MemeInfo'\nimport { MemeImage } from '../View/Picture/MemeImage'\n\n\nconst Item = ({ item, onPress }: {\n  item: Meme,\n  onPress: (value?: any) => void,\n}) => (\n  <TouchableOpacity onPress={onPress} style={[styles.item, styles.background]}>\n    <View style={styles.memeHeaderInfo}>\n      <User id={item?.author?.id} name={item?.author?.name} />\n      <MemeInfo creationTime={item?.createTime ?? \"\"} />\n    </View>\n    <View>\n      <MemeImage imageUrl={item?.url} />\n    </View>\n    <View>\n      <HashTagList\n        hashtagList={item?.tags?.map(tag => { return { id: tag, text: tag } }) ?? []}\n        showPoundSign={false}\n      />\n    </View>\n    <View style={styles.feedbackButton}>\n      <FeedbackButton initialCount={item?.counter?.likeCount ?? 0} feedbackType={FeedbackTypeEnums.Like} />\n      <FeedbackButton initialCount={item?.counter?.dislikeCount ?? 0} feedbackType={FeedbackTypeEnums.Dislike} />\n    </View>\n  </TouchableOpacity>\n)\n\nexport const TopicScreen = ({ navigation }) => {\n  const [selectedId, setSelectedId] = useState(null)\n  const [selectedTag, setSelectedTag] = useState('')\n\n  const { loading: popularTagsIsLoading, data: popularTagsData } = useQuery(\n    GET_POPULAR_TAGS\n  )\n\n  const onSelectTag = (hashTag: IHashTag) => {\n    setSelectedTag(hashTag.text)\n  }\n\n  const { loading: memeTagsIsLoading, data: memeTagsData } = useQuery(\n    GET_MEMES_BY_TAG,\n    {\n      skip: !popularTagsData?.popularTags,\n      variables: {\n        tag: selectedTag,\n      },\n    }\n  )\n\n  const hashtagList = popularTagsIsLoading\n    ? []\n    : popularTagsData.popularTags.map((tag: any) => {\n      return {\n        id: tag,\n        text: tag,\n      }\n    })\n\n  useEffect(() => {\n    if (!selectedTag && hashtagList?.length > 0) {\n      setSelectedTag(hashtagList[0].text)\n    }\n  })\n\n\n  const renderItem = ({ item }: Meme) => {\n    return (\n      <Item\n        item={item}\n        onPress={() => setSelectedId(item.id)}\n      />\n    )\n  }\n\n  return popularTagsIsLoading ? (\n    <View style={[loadingStyles.container, loadingStyles.horizontal]}>\n      <ActivityIndicator size=\"large\" />\n    </View>\n  ) : (\n      <>\n        <HashTagList\n          hashtagList={hashtagList}\n          showPoundSign={false}\n          onSelectionCallBack={onSelectTag}\n        />\n        <SafeAreaView style={styles.container}>\n          <FlatList\n            data={memeTagsData?.memesByTag ?? []}\n            renderItem={renderItem}\n            keyExtractor={(item: Meme) => item.id}\n            extraData={selectedId}\n          />\n        </SafeAreaView>\n      </>\n    )\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    backgroundColor: '#ffffff'\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    padding: 20,\n    marginVertical: 1,\n    marginHorizontal: 0,\n    display: 'flex',\n  },\n  memeHeaderInfo: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n  feedbackButton: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'row',\n  },\n})\n\nconst loadingStyles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n})\n","import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { ComposeScreen } from \"./ComposeScreen\";\nimport { ProfileScreen } from \"./ProfileScreen\";\nimport { TopicScreen } from \"./TopicScreen\";\n\nconst Tab = createBottomTabNavigator()\nconst TopicStack = createStackNavigator()\nconst ProfileStack = createStackNavigator()\nconst ComposeStack = createStackNavigator()\nconst TopicStackScreen = () => {\n    return (\n        <TopicStack.Navigator>\n            <TopicStack.Screen name=\"Topic\" component={TopicScreen} />\n        </TopicStack.Navigator>\n    )\n}\nconst ProfileStackScreen = () => {\n    return (\n        <ProfileStack.Navigator>\n            <ProfileStack.Screen name=\"Profile\" component={ProfileScreen} />\n        </ProfileStack.Navigator>\n    )\n}\nconst ComposeStackScreen = () => {\n    return (\n        <ComposeStack.Navigator>\n            <ComposeStack.Screen name=\"Compose\" component={ComposeScreen} />\n        </ComposeStack.Navigator>\n    )\n}\n\nexport const HomeScreen = () => {\n    return (\n        <Tab.Navigator>\n            <Tab.Screen name=\"Topic\" component={TopicStackScreen} />\n            <Tab.Screen name=\"Profile\" component={ProfileStackScreen} />\n            <Tab.Screen name=\"Compose\" component={ComposeStackScreen} />\n        </Tab.Navigator>\n    )\n}","import { gql } from '@apollo/client'\n\nexport const SIGNUP_USER = gql`\n    mutation createUser ($userInfo: CreateUserInput!) {\n        createUser (userInfo: $userInfo) {\n            user {\n                username\n                name\n                roles\n            }\n            token\n        }\n    }\n`\n\nexport const SIGNIN_USER = gql`\n    mutation login ($username: String!, $password: String!) {\n        login (username: $username, password: $password) {\n            user {\n                username\n                name\n                roles\n            }\n            token\n        }\n    }\n`","import { ApolloError, useApolloClient } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport {\n    View,\n    StyleSheet,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    Image,\n} from 'react-native'\nimport { SIGNUP_USER } from '../Query/UserQuery'\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { setStorageItem } from '../Helper/Storage';\nimport { Modal } from 'react-native';\nimport { AuthContext } from '../Provider/AuthProvider';\nimport { CreateUserMutationResult } from '../Generated/graphqlType';\nconst logo = require(\"../assets/logo.png\")\n\nexport const SignUpScreen = ({ navigation }) => {\n    const client = useApolloClient();\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [logoW, setLogow] = useState(0)\n    const [logoH, setLogoh] = useState(0)\n    const [modalMsg, setModalMsg] = useState(\"test\")\n    const [isModalVisible, setIsModalVisible] = useState(false)\n\n    const { signIn } = React.useContext(AuthContext);\n    useEffect(() => {\n        Image.getSize(\n            logo,\n            (width, height) => { setLogow(width); setLogoh(height); },\n            () => { });\n    }, [])\n\n    const Stack = createStackNavigator();\n    return (\n        <View style={styles.container}>\n            <Modal\n                transparent={true}\n                animationType=\"fade\"\n                visible={isModalVisible}\n                style={styles.modal}\n            >\n                <View style={styles.centeredView}>\n                    <View style={styles.modalView}>\n                        <Text style={styles.modalText}>{modalMsg}</Text>\n                        <TouchableOpacity\n                            style={styles.openButton}\n                            onPress={() => {\n                                setIsModalVisible(false);\n                            }}>\n                            <Text>關閉</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </Modal>\n            <Image source={logo} style={{ width: logoW, height: logoH }} />\n            <View style={styles.inputControl}>\n                <View style={styles.inputView} >\n                    <TextInput\n                        style={styles.inputText}\n                        placeholder=\"Email\"\n                        placeholderTextColor=\"#A5A5A5\"\n                        onChangeText={text => setEmail(text)} />\n                </View>\n                <View style={styles.inputView} >\n                    <TextInput\n                        secureTextEntry\n                        style={styles.inputText}\n                        placeholder=\"Password\"\n                        placeholderTextColor=\"#A5A5A5\"\n                        onChangeText={text => setPassword(text)} />\n                </View>\n\n                <View style={styles.inputView} >\n                    <TextInput\n                        style={styles.inputText}\n                        placeholder=\"Name\"\n                        placeholderTextColor=\"#A5A5A5\"\n                        onChangeText={text => setName(text)} />\n                </View>\n\n                <TouchableOpacity style={styles.button}\n                    onPress={async (e) => {\n                        try {\n                            const { data } = await client.mutate({\n                                mutation: SIGNUP_USER,\n                                variables: {\n                                    userInfo:\n                                    {\n                                        username: email,\n                                        password: password,\n                                        name: name\n                                    }\n                                },\n                            }) as CreateUserMutationResult;\n                            await setStorageItem(\n                                'userinfo',\n                                JSON.stringify(data?.createUser ?? null)\n                            );\n                            signIn({ email, password, token: data?.createUser?.token ?? null })\n                            setModalMsg(\"註冊成功\")\n                            setIsModalVisible(true)\n                        } catch (error: unknown) {\n                            setModalMsg((error as ApolloError)?.message ?? JSON.stringify(error))\n                            setIsModalVisible(true)\n                            console.log(error)\n                        }\n                    }}\n                >\n                    <Text style={styles.loginText}>註冊</Text>\n                </TouchableOpacity>\n            </View>\n        </View >\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'white',\n        flex: 1,\n        alignItems: 'center'\n    },\n    inputControl: {\n        width: '100%',\n        flex: 1,\n        alignItems: 'center'\n    },\n    inputView: {\n        width: \"30%\",\n        minWidth: 300,\n        marginVertical: 5,\n    },\n    inputText: {\n        height: 50,\n        borderWidth: 0,\n        borderBottomWidth: 1\n    },\n    forgot: {\n        color: \"#A5A5A5\"\n    },\n    button: {\n        width: \"30%\",\n        minWidth: 300,\n        backgroundColor: \"#E83468\",\n        borderRadius: 25,\n        height: 50,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginVertical: 10,\n    },\n    loginText: {\n        color: 'white'\n    },\n    centeredView: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: 'white',\n        margin: 0,\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    modal: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: 'white',\n        margin: 0,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    modalView: {\n        width: \"100%\",\n        height: \"100%\",\n        justifyContent: 'center',\n        margin: 20,\n        backgroundColor: 'white',\n        borderRadius: 20,\n        padding: 35,\n        alignItems: 'center',\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n    },\n    openButton: {\n        backgroundColor: '#2296F3',\n        borderRadius: 20,\n        padding: 10,\n        elevation: 2,\n    },\n    modalText: {\n        marginBottom: 15,\n        textAlign: 'center',\n    }\n});","import { ApolloError, useApolloClient } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport {\n    View,\n    StyleSheet,\n    Text,\n    TextInput,\n    TouchableOpacity,\n    Image,\n    Modal,\n} from 'react-native'\nimport { SIGNIN_USER } from '../Query/UserQuery'\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { setStorageItem } from '../Helper/Storage';\nimport { AuthContext } from '../Provider/AuthProvider';\nimport { LoginMutationResult } from '../Generated/graphqlType';\nconst logo = require(\"../assets/logo.png\")\n\nexport const SignInScreen = ({ navigation }) => {\n    const client = useApolloClient();\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [logoW, setLogow] = useState(0)\n    const [logoH, setLogoh] = useState(0)\n    const [modalMsg, setModalMsg] = useState(\"test\")\n    const [isModalVisible, setIsModalVisible] = useState(false)\n    const { signIn } = React.useContext(AuthContext);\n\n    useEffect(() => {\n        Image.getSize(\n            logo,\n            (width, height) => { setLogow(width); setLogoh(height); },\n            () => { });\n    }, [])\n\n    const Stack = createStackNavigator();\n    return (\n        <View style={styles.container}>\n            <Modal\n                transparent={true}\n                animationType=\"fade\"\n                visible={isModalVisible}\n                style={styles.modal}\n            >\n                <View style={styles.centeredView}>\n                    <View style={styles.modalView}>\n                        <Text style={styles.modalText}>{modalMsg}</Text>\n                        <TouchableOpacity\n                            style={styles.openButton}\n                            onPress={() => {\n                                setIsModalVisible(false);\n                            }}>\n                            <Text>關閉</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </Modal>\n            <Image source={logo} style={{ width: logoW, height: logoH }} />\n            <View style={styles.inputControl}>\n                <View style={styles.inputView} >\n                    <TextInput\n                        style={styles.inputText}\n                        placeholder=\"Email\"\n                        placeholderTextColor=\"#A5A5A5\"\n                        onChangeText={text => setEmail(text)} />\n                </View>\n                <View style={styles.inputView} >\n                    <TextInput\n                        secureTextEntry\n                        style={styles.inputText}\n                        placeholder=\"Password\"\n                        placeholderTextColor=\"#A5A5A5\"\n                        onChangeText={text => setPassword(text)} />\n                </View>\n\n                <TouchableOpacity style={styles.button}\n                    onPress={async (e) => {\n                        try {\n                            const { data } = await client.mutate({\n                                mutation: SIGNIN_USER,\n                                variables: {\n                                    username: email,\n                                    password: password,\n                                },\n                            }) as LoginMutationResult;\n                            console.log(data)\n                            await setStorageItem(\n                                'userinfo',\n                                JSON.stringify(data?.login ?? null)\n                            );\n                            setModalMsg(\"登入成功\")\n                            setIsModalVisible(true)\n                            signIn({ email, password, token: data?.login?.token ?? null })\n                            navigation.navigate(\"Home\")\n                        } catch (error: unknown) {\n                            setModalMsg((error as ApolloError)?.message ?? JSON.stringify(error))\n                            setIsModalVisible(true)\n                            console.log(error)\n                        }\n\n                    }}\n                >\n                    <Text style={styles.loginText}>登入</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.button}\n                    onPress={async (e) => {\n                        navigation.navigate('Sign Up')\n                    }}\n                >\n                    <Text style={styles.loginText}>註冊</Text>\n                </TouchableOpacity>\n                <TouchableOpacity>\n                    <Text style={styles.forgot}>Forgot your password?</Text>\n                </TouchableOpacity>\n            </View>\n        </View >\n    );\n}\n\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'white',\n        flex: 1,\n        alignItems: 'center'\n    },\n    inputControl: {\n        width: '100%',\n        flex: 1,\n        alignItems: 'center'\n    },\n    inputView: {\n        width: \"30%\",\n        minWidth: 300,\n        marginVertical: 5,\n    },\n    inputText: {\n        height: 50,\n        borderWidth: 0,\n        borderBottomWidth: 1\n    },\n    forgot: {\n        color: \"#A5A5A5\"\n    },\n    button: {\n        width: \"30%\",\n        minWidth: 300,\n        backgroundColor: \"#E83468\",\n        borderRadius: 25,\n        height: 50,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginVertical: 10,\n    },\n    loginText: {\n        color: 'white'\n    },\n    centeredView: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: 'white',\n        margin: 0,\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    modal: {\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: 'white',\n        margin: 0,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    modalView: {\n        width: \"100%\",\n        height: \"100%\",\n        justifyContent: 'center',\n        margin: 20,\n        backgroundColor: 'white',\n        borderRadius: 20,\n        padding: 35,\n        alignItems: 'center',\n        shadowColor: '#000',\n        shadowOffset: {\n            width: 0,\n            height: 2,\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 3.84,\n        elevation: 5,\n    },\n    openButton: {\n        backgroundColor: '#2296F3',\n        borderRadius: 20,\n        padding: 10,\n        elevation: 2,\n    },\n    modalText: {\n        marginBottom: 15,\n        textAlign: 'center',\n    }\n});","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { SignUpScreen } from './SignUpScreen';\nimport { SignInScreen } from './SignInScreen';\nconst logo = require(\"../assets/logo.png\")\n\nexport const LogInScreen = ({ navigation }) => {\n    const Stack = createStackNavigator();\n    return (\n        <Stack.Navigator initialRouteName=\"Sign In\">\n            <Stack.Screen name=\"Sign In\" component={SignInScreen} />\n            <Stack.Screen name=\"Sign Up\" component={SignUpScreen} />\n        </Stack.Navigator>\n    );\n}\n","import React from \"react\";\nimport {\n    View,\n    Text\n} from 'react-native'\n\nexport const SplashScreen = () => {\n    return (\n        <View>\n            <Text>Loading...</Text>\n        </View>\n    );\n}","import { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { AuthStateContext } from \"../Provider/AuthProvider\";\nimport { HomeScreen } from \"./HomeScreen\";\nimport { LogInScreen } from \"./LogInScreen\";\nimport { SplashScreen } from \"./SplashScreen\";\n\nexport const AppScreen = () => {\n    const Stack = createStackNavigator();\n    const authStateContext = React.useContext(AuthStateContext);\n\n    return (\n        <NavigationContainer>\n            <Stack.Navigator headerMode=\"none\">\n                {authStateContext.isLoading ? (\n                    // We haven't finished checking for the token yet\n                    <Stack.Screen name=\"Splash\" component={SplashScreen} />\n                ) : authStateContext.userToken == null ? (\n                    // No token found, user isn't signed in\n                    <Stack.Screen\n                        name=\"SignIn\"\n                        component={LogInScreen}\n                        options={{\n                            title: 'Sign in',\n                            // When logging out, a pop animation feels intuitive\n                            animationTypeForReplace: authStateContext.isSignout ? 'pop' : 'push',\n                            headerShown: false\n                        }}\n                    />\n                ) : (\n                            // User is signed in\n                            <Stack.Screen name=\"Home\" component={HomeScreen} />\n                        )}\n            </Stack.Navigator>\n        </NavigationContainer>\n    )\n}","import * as React from 'react'\nimport * as eva from '@eva-design/eva';\nimport { apolloClient } from './Apollo/ApolloClient'\nimport { ApolloProvider } from '@apollo/client'\nimport { ApplicationProvider } from '@ui-kitten/components';\nimport { AppScreen } from './Screens/AppScreen';\nimport { AuthProvider } from './Provider/AuthProvider';\n\nexport default function App() {\n  return (\n    <ApplicationProvider {...eva} theme={eva.light}>\n      <ApolloProvider client={apolloClient}>\n        <AuthProvider>\n          <AppScreen />\n        </AuthProvider>\n      </ApolloProvider>\n    </ApplicationProvider>\n  )\n}\n"],"sourceRoot":""}